<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[【CSS基础】id选择器]]></title>
      <url>http://www.jiang-yu.cn/2017/02/09/CSS/CSSid%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>CSS基础学习之路–03 id选择器！<br><a id="more"></a></p>
</blockquote>
<h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><p>id选择器可以为标有id的HTML元素指定特定的样式<br>id选择器以“#”来定义</p>
<h2 id="id选择器和派生选择器"><a href="#id选择器和派生选择器" class="headerlink" title="id选择器和派生选择器"></a>id选择器和派生选择器</h2><pre><code>目前比较常用的方式是id选择器常常用于建立派生选择器
</code></pre><h2 id="id选择器使用"><a href="#id选择器使用" class="headerlink" title="id选择器使用"></a>id选择器使用</h2><p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;link href=&quot;demo.css&quot; type=&quot;text/css&quot; ref=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p id=&quot;pid&quot;&gt;Hello JhonRain &lt;/p&gt;</span><br><span class="line">    &lt;div id=&quot;divId&quot;&gt;</span><br><span class="line">        这是一个Div</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;p id=&quot;ppid&quot;&gt;Hell JhonRain &lt;a href=&quot;http://www.jhonrain.org&quot;&gt;Blog&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>demo.css<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#pid&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#ppid a&#123;</span><br><span class="line">    color:green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#divId&#123;</span><br><span class="line">    color:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【CSS基础】属性选择器]]></title>
      <url>http://www.jiang-yu.cn/2017/02/09/CSS/CSS%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>CSS基础学习之路–05 属性选择器！<br><a id="more"></a></p>
</blockquote>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>1.属性选择器<br>　　对带有指定属性的HTML元素设置样式<br>2.属性和值选择器</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        [title]&#123;</span><br><span class="line">            color:red;</span><br><span class="line">        &#125;</span><br><span class="line">        [title=tt]&#123;</span><br><span class="line">            color:green;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p title=&quot;demo&quot;&gt;属性选择器&lt;/p&gt;</span><br><span class="line">    &lt;p title=&quot;tt&quot;&gt;属性值选择器&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【CSS样式】背景]]></title>
      <url>http://www.jiang-yu.cn/2017/02/09/CSS/CSS%E6%A0%B7%E5%BC%8F-%E8%83%8C%E6%99%AF/</url>
      <content type="html"><![CDATA[<blockquote>
<p>CSS样式学习之路–01 背景！<br><a id="more"></a></p>
</blockquote>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>　　CSS允许应用纯色作为背景，也允许使用背景图像创建相当复杂的效果<br><img src="http://learnblog.oss-cn-shanghai.aliyuncs.com/css%20background.png" alt="background"></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;link href=&quot;demo.css&quot; type=&quot;text/css&quot; ref=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;</span><br><span class="line">        使用样式表</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">    &lt;a&gt;a标签样式&lt;/a&gt;</span><br><span class="line">    &lt;h2&gt;h2样式&lt;/h2&gt;</span><br><span class="line">    &lt;h3&gt;h3样式&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;Hello JhonRain &lt;/p&gt;</span><br><span class="line">    &lt;div class=&quot;divClass&quot;&gt;</span><br><span class="line">        Hello</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>demo.css<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    background-color: gray;</span><br><span class="line">&#125;</span><br><span class="line">p&#123;</span><br><span class="line">    width: 150px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.divClass&#123;</span><br><span class="line">    background-image: url(../a.png);</span><br><span class="line">    #background-repeat:no-repeat/repeat/repeat-x/repeat-y/round/space/inherit;</span><br><span class="line">    background-repeat:no-repeat;</span><br><span class="line">    /** right:right和center **/</span><br><span class="line">    background-position: right top;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="CSS3背景"><a href="#CSS3背景" class="headerlink" title="CSS3背景"></a>CSS3背景</h2><pre><code>background-size: 规定背景图片的尺寸
background-origin: 规定背景图片的定位区域
background-clip:规定背景的绘制区域
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【CSS基础】类选择器]]></title>
      <url>http://www.jiang-yu.cn/2017/02/09/CSS/CSS%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>CSS基础学习之路–04 类选择器！<br><a id="more"></a></p>
</blockquote>
<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>1.类选择器：<br>　　类选择器可以以一个点显示<br>2.class也可以用作派生选择器中</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;link href=&quot;demo.css&quot; type=&quot;text/css&quot; ref=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p class=&quot;pclass&quot;&gt;Hello JhonRain &lt;/p&gt;</span><br><span class="line">    &lt;div class=&quot;divClass&quot;&gt;</span><br><span class="line">        &lt;p&gt;Hello Div&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>demo.css<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.pclass&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.divClass p&#123;</span><br><span class="line">    color:green;</span><br><span class="line">    font-size:10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【CSS基础】派生选择器]]></title>
      <url>http://www.jiang-yu.cn/2017/02/09/CSS/CSS%E6%B4%BE%E7%94%9F%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>CSS基础学习之路–02派生选择器！<br><a id="more"></a></p>
</blockquote>
<h2 id="派生选择器"><a href="#派生选择器" class="headerlink" title="派生选择器"></a>派生选择器</h2><p>　　通过依据元素在其位置的上下文关系来定义样式<br>　　<br>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;link href=&quot;demo.css&quot; type=&quot;text/css&quot; ref=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- blue --&gt;</span><br><span class="line">    &lt;p&gt;&lt;strong&gt;Hello JhonRain&lt;/strong&gt;&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;!-- red --&gt;</span><br><span class="line">        &lt;li&gt;&lt;strong&gt;li标签：Hello Css&lt;/strong&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>demo.css<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">li strong&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br><span class="line">strong&#123;</span><br><span class="line">    color:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【CSS基础】CSS介绍和语法]]></title>
      <url>http://www.jiang-yu.cn/2017/02/09/CSS/CSS%E4%BB%8B%E7%BB%8D%E5%92%8C%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>CSS基础学习之路–01介绍和语法！<br><a id="more"></a></p>
</blockquote>
<h2 id="CSS介绍"><a href="#CSS介绍" class="headerlink" title="CSS介绍"></a>CSS介绍</h2><p>　　CSS指层叠样式表<br>　　CSS样式表极大地提高了工作效率
　　</p>
<h2 id="CSS基础语法"><a href="#CSS基础语法" class="headerlink" title="CSS基础语法"></a>CSS基础语法</h2><p><code>selector{
　　property:value
}</code><br>例如：h1{color:red;font-size:14px;}</p>
<blockquote>
<p>注意：属性大于1个之后，属性之间用分号隔开<br>如果值大于1个单词，则需要加上引号，<br>p{font-family:”sans serif”;}</p>
</blockquote>
<h2 id="CSS高级语法"><a href="#CSS高级语法" class="headerlink" title="CSS高级语法"></a>CSS高级语法</h2><p>1.选择器分组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2.继承</span><br></pre></td></tr></table></figure></p>
<pre><code>body{
    color:green;
}
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 示例</span><br><span class="line">index.html</span><br></pre></td></tr></table></figure>
<p>&lt;!DOCTYPE html&gt;</p>
<p><html lang="en"></html></p>
<p><head><br>    <meta charset="UTF-8"><br>    <link href="demo.css" type="text/css" ref="stylesheet"><br></head></p>
<p><body><br>    <h1><br>        使用样式表<br>    </h1><br>    <a>a标签样式</a><br>    <h2>h2样式</h2><br>    <h3>h3样式</h3><br>    <p>Hello JhonRain </p><br></body><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">demo.css</span><br></pre></td></tr></table></figure></p>
<p>h1,a,h2{<br>    color:red;<br>    font-size:14px;<br>}</p>
<p>body{<br>    color:green;<br>}</p>
<p>p{<br>    color:blue;<br>}<br>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【NodeJS】NodeJS 环境搭建]]></title>
      <url>http://www.jiang-yu.cn/2017/02/08/NodeJS/NodeJS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<blockquote>
<p>NodeJs探索之路！<br><a id="more"></a></p>
</blockquote>
<p>　　首先从官网下载压缩包，解压到usr/local/目录下，<br>　　切换到root用户，修改/etc/profile文件，<br>　　执行修改文件命令：<code>vim /etc/profile</code><br>　　然后，添加NODE环境变量，具体配置如下：</p>
<blockquote>
<p>&gt;<br>export NODE_HOME=/usr/local/node450<br>export PATH=\$PATH:\$NODE_HOME/bin<br>export NODE_PATH=$NODE_HOME/lib/node_modules</p>
</blockquote>
<p>　　如下图所示：<br>　　<img src="http://learnblog.oss-cn-shanghai.aliyuncs.com/NODE_PATH.png" alt="NODE_PATH"><br>　　<br>　　最后，配置完成之后，记得使profile文件生效，执行 <code>source profile</code> 命令，然后查看一下是否安装成功，查看一下node的版本号，如下图所示：<br>　　<img src="http://learnblog.oss-cn-shanghai.aliyuncs.com/NODE-VERSION.png" alt="NODE_VERSION"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Nginx】Nginx基本操作]]></title>
      <url>http://www.jiang-yu.cn/2017/02/08/Ngnix/Nginx%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Nginx学习遇到的问题和积累！<br><a id="more"></a></p>
</blockquote>
<h2 id="基本操作命名"><a href="#基本操作命名" class="headerlink" title="基本操作命名"></a>基本操作命名</h2><ol>
<li>停止：./nginx -s stop</li>
<li>重新加载：./nginx -s reload</li>
<li>启动：./nginx -c /usr/local/nginx/conf/nginx.conf</li>
</ol>
<h2 id="支持websocket配置"><a href="#支持websocket配置" class="headerlink" title="支持websocket配置"></a>支持websocket配置</h2><p>例如：vim vhost/xx.jhonrain.conf</p>
<p>``<br>server{<br>　　listen 80;<br>　　server_name xx.jhonrain.com<br>　　charset utf-8;</p>
<p>　　location /{<br>　　　　root html;<br>　　　　index index.html index.htm;<br>　　　　proxy_pass <a href="http://127.0.0.1:8864" target="_blank" rel="external">http://127.0.0.1:8864</a>;<br>　　　　proxy_set_header Host \$host;<br>　　　　proxy_set_header X-Real-IP \$remote_addr;<br>　　　　proxy_set_header X-Forward-For \$proxy_add_x_forwarded_for;<br>　　　　proxy_redirect default;<br>　　　　proxy_connect_timeout 10;<br>　　　　<br>　　　　proxy_http_version 1.1;<br>　　　　proxy_set_header Upgrade $http_upgrade;<br>　　　　proxy_set_header Connection “upgrade”;<br>　　　　<br>　　}<br>　　<br>　　error_page 500 502 503 504 /50x.html;<br>　　location = /50x.html{<br>　　　　　　　root html;<br>　　}<br>　　<br>　　access_log logs/xx.xx.com.access.log;<br>　　error_log logs/xx.xx.com.error.log;<br>}<br>``</p>
<h2 id="配置文件隔离配置–分离多个站点的配置"><a href="#配置文件隔离配置–分离多个站点的配置" class="headerlink" title="配置文件隔离配置–分离多个站点的配置"></a>配置文件隔离配置–分离多个站点的配置</h2><p><code>include vhost/*.conf;</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【Linux】Linux 新增用户]]></title>
      <url>http://www.jiang-yu.cn/2017/02/08/Linux/Linux%E6%96%B0%E5%A2%9E%E7%94%A8%E6%88%B7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Linux学习之路！<br><a id="more"></a></p>
</blockquote>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><blockquote>
<p>&gt;<br>[root@localhost ~]# useradd -d /home/jhonrain -m jhonrain<br>[root@localhost ~]# passwd jhonrain<br>Changing password for user jhonrain<br>New password:<br>BAD PASSWORD: it is WAY too short<br>BAD PASSWORD: is too simple<br>Retype new password:<br>passwd: all authentication tokens updated successfully.<br>[root@localhost ~]# chown jhonrain -R /home/jhonrain<br>[root@localhost ~]# su jhonrain<br>[jhonrain@localhost root]\$ ls<br>ls: cannot open directory .: Permission denied<br>[jhonrain@localhost root]\$ cd /home/jhonrain/<br>[jhonrain@localhost ~]\$ ls<br>[jhonrain@localhost ~]\$ touch jhonrain.txt<br>[jhonrain@localhost ~]\$ ls<br>jhonrain.txt<br>[jhonrain@localhost ~]\$ vim jhonrain.txt<br>[jhonrain@localhost ~]\$<br>``</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【LINUX】批量kill进程]]></title>
      <url>http://www.jiang-yu.cn/2017/02/08/Linux/Linux%20%E6%89%B9%E9%87%8Fkill%E8%BF%9B%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>闲暇时间学习学习HTML相关知识！</p>
</blockquote>
<a id="more"></a>
<p>　　管道符”|”用来隔开两个命令，管道符左边命令的输出会作为管道符右边命令的输入。<br>　　<br>　　<code>ps -ef|grep tomcat|grep -v grep|cat -c 9-15|xargs kill -9</code><br>　　<br>　　ps - ef”是Red Hat里查看所有进程的命令,这时检索出的进程将作为下一条命令“grep tomcat”的输入。</p>
<p>　　grep tomcat的输出结果是，所有含有关键字“tomcat”的进程</p>
<p>　　grep -v grep是在列出的进程中去除含有关键字“grep”的进程。</p>
<p>　　cut -c 9-15　是截取输入行的第9个字符到第15个字符，而这正好是进程号PID。</p>
<p>　　xargs kill -9　中的xargs命令是用来把前面命令的输出结果（PID）作为“kill -9”命令的参数，并执行该令。   </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【LINUX】文件操作]]></title>
      <url>http://www.jiang-yu.cn/2017/02/08/Linux/Linux%E6%96%87%E4%BB%B6%E7%9A%84%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Linux 学习之路！</p>
</blockquote>
<a id="more"></a>
<h2 id="文件的操作"><a href="#文件的操作" class="headerlink" title="文件的操作"></a>文件的操作</h2><h3 id="机器对拷文件"><a href="#机器对拷文件" class="headerlink" title="机器对拷文件"></a>机器对拷文件</h3><p>　　<code>scp -r /home/schedule/ schedule@121.199.178.127:/home/schedule/</code></p>
<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p>　　<code>mv * /usr/local/tmp</code></p>
<h3 id="修改文件的访问权限"><a href="#修改文件的访问权限" class="headerlink" title="修改文件的访问权限"></a>修改文件的访问权限</h3><p>　　<code>chmod u+x aa.txt
　　　chmod 550 aa.txt</code></p>
<h3 id="修改文件所属的用户组"><a href="#修改文件所属的用户组" class="headerlink" title="修改文件所属的用户组"></a>修改文件所属的用户组</h3><p>　　<code>chown -R demo:demo directroydemo</code></p>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>　　<code>rm -rf aa.txt</code></p>
<h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><p>　　<code>more aa.txt
   　　cat aa.txt
   　　tail aa.txt
   　　head aa.txt</code></p>
<h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p>　　<code>vim aa.txt</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【HTML知识点】HTML之表单创建]]></title>
      <url>http://www.jiang-yu.cn/2017/02/07/HTML5/HTML%E8%A1%A8%E5%8D%95%E5%88%9B%E5%BB%BA/</url>
      <content type="html"><![CDATA[<blockquote>
<p>闲暇时间学习学习HTML相关知识！</p>
</blockquote>
<a id="more"></a>
<h1 id="HTML-表单"><a href="#HTML-表单" class="headerlink" title="HTML 表单"></a>HTML 表单</h1><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><p><code>表单　　　　　　　&lt;form&gt;</code><br><code>输入域　　　　　　&lt;input&gt;</code><br><code>文本域　　　　　　&lt;textarea&gt;</code><br><code>控制标签　　　　　&lt;label&gt;</code><br><code>定义域　　　　　　&lt;fieldset&gt;</code><br><code>域的标题　　　　　&lt;legend&gt;</code><br><code>选择列表　　　　　&lt;select&gt;</code><br><code>选择组　　　　　　&lt;optgroup&gt;</code><br><code>下拉表中的选项　　&lt;option&gt;</code><br><code>按钮　　　　　　　&lt;button&gt;</code></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html language=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;表单创建&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=&quot;xxx.do&quot; method=&quot;post&quot;&gt;</span><br><span class="line">        &lt;label&gt;&lt;span&gt;用户名：&lt;/span&gt;&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;</span><br><span class="line">        &lt;/br&gt;</span><br><span class="line">        &lt;label&gt;&lt;span&gt;密码：&lt;/span&gt;&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;</span><br><span class="line">        &lt;/br&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【HTML知识点】HTML之TABLE布局]]></title>
      <url>http://www.jiang-yu.cn/2017/02/07/HTML5/HTML%20TABLE%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<blockquote>
<p>闲暇时间学习学习HTML相关知识！</p>
</blockquote>
<a id="more"></a>
<p>#HTML TABLE布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!Doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;table布局&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        body&#123;</span><br><span class="line">            margin:0px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;table  width=&quot;100%&quot;,height=&quot;950px&quot; style=&quot;backgroun-color:red;&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td colspan=&quot;2&quot; width=&quot;100%&quot; height=&quot;10%&quot; style=&quot;backgroun-color:blue;&quot;&gt;顶部&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td width=&quot;30%&quot; height=&quot;80%&quot; style=&quot;background-color=gray;&quot;&gt;左菜单&lt;/td&gt;</span><br><span class="line">            &lt;td width=&quot;70%&quot; height=&quot;80%&quot; style=&quot;background-color=blue;&quot;&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td colspan=&quot;2&quot; width=&quot;100%&quot; height=&quot;10%&quot; style=&quot;backgroun-color:black;&quot;&gt;底部&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【HTML知识点】HTML 框架]]></title>
      <url>http://www.jiang-yu.cn/2017/02/07/HTML5/HTML%E6%A1%86%E6%9E%B6%20frame/</url>
      <content type="html"><![CDATA[<blockquote>
<p>闲暇时间学习学习HTML相关知识！</p>
</blockquote>
<a id="more"></a>
<h1 id="HTML-框架"><a href="#HTML-框架" class="headerlink" title="HTML 框架"></a>HTML 框架</h1><ol>
<li><p>框架标签（frame) Deprecated<br>框架对于页面的设计用非常大的作用</p>
</li>
<li><p>框架集标签(frameset) Deprecated<br>框架集标签定义如何将窗口分割为框架<br>每一个frameset定义一系列行或列<br>rows/cols的值规定了每行或每列占据屏幕的面积</p>
</li>
<li><p>常用标签<br>noresize:固定框架大小<br>cols：列<br>rows：行</p>
</li>
<li><p>内联框架<br>iframe</p>
</li>
</ol>
<h1 id="iframe-示例"><a href="#iframe-示例" class="headerlink" title="iframe 示例"></a>iframe 示例</h1><p>framea.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;red&quot;&gt;</span><br><span class="line">    &lt;p&gt;段落1&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;段落2&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;a href=&quot;http://www.jiang-yu.cn&quot; target=&quot;_top&quot;&gt;Click&lt;/a&gt;</span><br><span class="line">    &lt;iframe src=&quot;framea.html&quot; frameboder=&quot;0&quot; width=&quot;400px&quot; height=&quot;400px&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;/iframe&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【HTML知识点】XHTML规范]]></title>
      <url>http://www.jiang-yu.cn/2017/02/07/HTML5/XHTML%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<blockquote>
<p>闲暇时间学习学习HTML相关知识！</p>
</blockquote>
<a id="more"></a>
<h1 id="XHTML-介绍"><a href="#XHTML-介绍" class="headerlink" title="XHTML 介绍"></a>XHTML 介绍</h1><ol>
<li>什么是XHTML?<br>XHTML指的是可扩展的超文本标记语言<br>XHTML与HTML 4.0.1几乎是相同的<br>XHTML是更严格更纯净的HTML版本<br>XHTML是以XML应用的方式定义的HTML<br>XHTML得到了主流浏览器支持</li>
<li><p>为啥使用XHTML？<br>为了代码的完整性和良好性</p>
</li>
<li><p>文档声明<br>DTD：规定了使用通用标记语言的网页语法<br>类型：</p>
<pre><code>STRICT（严格类型）
TRAMSOTOPMAL（过渡类型）
FRAMESET（框架类型）
</code></pre></li>
</ol>
<h1 id="XHTML-元素"><a href="#XHTML-元素" class="headerlink" title="XHTML 元素"></a>XHTML 元素</h1><ol>
<li>XHTML 元素必须正确嵌套</li>
<li>XHTML 元素必须始终关闭</li>
<li>XHTML 元素必须小写</li>
<li>XHTML 元素必须有一个根元素</li>
</ol>
<h1 id="XHTML-属性"><a href="#XHTML-属性" class="headerlink" title="XHTML 属性"></a>XHTML 属性</h1><ol>
<li>XHTML 属性必须使用小写</li>
<li>XHTML 属性值必须用引号包围</li>
<li>XHTML 属性的最小化也是静止的</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【HTML知识点】HTML 实体]]></title>
      <url>http://www.jiang-yu.cn/2017/02/07/HTML5/HTML%E5%AE%9E%E4%BD%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>闲暇时间学习学习HTML相关知识！</p>
</blockquote>
<a id="more"></a>
<h1 id="HTML-实体"><a href="#HTML-实体" class="headerlink" title="HTML 实体"></a>HTML 实体</h1><ol>
<li><p>实体<br>HTML中预留字符串必须被替换成字符实体<br>例如：&lt;、&gt;、&amp;等</p>
</li>
<li><p>转换字符实体映射表<br><img src="http://learnblog.oss-cn-shanghai.aliyuncs.com/html%E5%AE%9E%E4%BD%93.png" alt="html实体"></p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【HTML知识点】HTML背景]]></title>
      <url>http://www.jiang-yu.cn/2017/02/07/HTML5/HTML%E8%83%8C%E6%99%AF/</url>
      <content type="html"><![CDATA[<blockquote>
<p>闲暇时间学习学习HTML相关知识！</p>
</blockquote>
<a id="more"></a>
<h1 id="HTML-背景"><a href="#HTML-背景" class="headerlink" title="HTML 背景"></a>HTML 背景</h1><ol>
<li>背景标签：background 设置背景图片</li>
<li>背景颜色：bgcolor 设置背景颜色</li>
<li>颜色：<br>颜色是由一个十六进制符号来定义，这个符号用RGB组成<br>颜色值最小值：0(#00)<br>颜色值最大值：255(#FF)<br>红色：#FF0000<br>绿色：#00FF00<br>蓝色：#0000FF</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【HTML知识点】HTML之DIV布局]]></title>
      <url>http://www.jiang-yu.cn/2017/02/07/HTML5/HTML%20DIV/</url>
      <content type="html"><![CDATA[<blockquote>
<p>闲暇时间学习学习HTML相关知识！</p>
</blockquote>
<a id="more"></a>
<p>#HTML DIV布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!Doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;div布局&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        body&#123;</span><br><span class="line">            margin:0px;</span><br><span class="line">        &#125;</span><br><span class="line">        #container&#123;</span><br><span class="line">            width:100%;</span><br><span class="line">            height:950px;</span><br><span class="line">            background-color:gray;</span><br><span class="line">        &#125;</span><br><span class="line">        #heading&#123;</span><br><span class="line">            width:100px;</span><br><span class="line">            height:10%;</span><br><span class="line">            background-color:green;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #content_menu&#123;</span><br><span class="line">            width:30%;</span><br><span class="line">            height:80%;</span><br><span class="line">            background-color:red;</span><br><span class="line">            float:left;</span><br><span class="line">        &#125;</span><br><span class="line">        #content_body&#123;</span><br><span class="line">            width:70%;</span><br><span class="line">            height:80%;</span><br><span class="line">            background-color:blue;</span><br><span class="line">            float:left;</span><br><span class="line">        &#125;</span><br><span class="line">        #footing&#123;</span><br><span class="line">            width:100px;</span><br><span class="line">            height:10%;</span><br><span class="line">            background-color:pink;</span><br><span class="line">            clear:float;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;heading&quot;&gt;头部&lt;/div&gt;</span><br><span class="line">        &lt;div id=&quot;content_menu&quot;&gt;内容菜单&lt;/div&gt;</span><br><span class="line">        &lt;div id=&quot;content_body&quot;&gt;内容主体&lt;/div&gt;</span><br><span class="line">        &lt;div id=&quot;footing&quot;&gt;底部&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【HTML知识点】HTML列表]]></title>
      <url>http://www.jiang-yu.cn/2017/02/06/HTML5/HTML%E5%88%97%E8%A1%A8%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>闲暇时间学习学习HTML相关知识！</p>
</blockquote>
<a id="more"></a>
<h1 id="HTML-列表"><a href="#HTML-列表" class="headerlink" title="HTML 列表"></a>HTML 列表</h1><p><code>有序列表　　　&lt;ol&gt;</code><br><code>无序列表　　　&lt;ul&gt;</code><br><code>列表项　　　　&lt;li&gt;</code><br><code>列表　　　　　&lt;dl&gt;</code><br><code>列表项　　　　&lt;dt&gt;</code><br><code>描述　　　　　&lt;dd&gt;</code></p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;apple&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;htc&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;sc&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">        &lt;li&gt;apple&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;htc&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;sc&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><ol>
<li><p>无序列表<br>使用标签：<code>&lt;ul&gt;、&lt;li&gt;</code><br>属性：disc、circle、square</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--type取值 disc:实心圆 circle:空心圆 square：实心方块 --&gt;</span><br><span class="line">&lt;ul type=&quot;disc&quot;&gt;</span><br><span class="line">    &lt;li&gt;apple&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;htc&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;sc&lt;/li&gt;</span><br><span class="line">&lt;ul&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>有序列表<br>使用标签：<code>&lt;ol&gt;/&lt;li&gt;</code><br>属性：A、a、l、i、start (type取值)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol type=&quot;A&quot;&gt;</span><br><span class="line">    &lt;li&gt;apple&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;htc&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;sc&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>嵌套列表<br>使用标签：<code>&lt;ul&gt;/&lt;ol&gt;/&lt;li&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul type=&quot;disc&quot;&gt;</span><br><span class="line">    &lt;li&gt;动物&lt;/li&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;狗&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;猫&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;li&gt;植物&lt;/li&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;草&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;花&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">&lt;ul&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义列表<br>使用标签：<code>&lt;dl&gt;/&lt;dt&gt;/&lt;dd&gt;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;Hello&lt;/dt&gt;</span><br><span class="line">        &lt;dd&gt;描述一&lt;/dd&gt;</span><br><span class="line">    &lt;dt&gt;World&lt;/dt&gt;</span><br><span class="line">        &lt;dd&gt;描述二&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【HTML知识点】HTML块]]></title>
      <url>http://www.jiang-yu.cn/2017/02/06/HTML5/HTML%E5%9D%97%E5%85%83%E7%B4%A0%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<blockquote>
<p>闲暇时间学习学习HTML相关知识！</p>
</blockquote>
<a id="more"></a>
<p>#HTML 块</p>
<h2 id="HTML块元素"><a href="#HTML块元素" class="headerlink" title="HTML块元素"></a>HTML块元素</h2><pre><code>块元素在显示的时候，通常会以新行开始
如：&lt;h1&gt;、&lt;p&gt;、&lt;ul&gt;
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;Hello&lt;/p&gt;</span><br><span class="line">    &lt;h1&gt;标题一&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="HTML内联元素"><a href="#HTML内联元素" class="headerlink" title="HTML内联元素"></a>HTML内联元素</h2><pre><code>内联元素显示通常不会以新行开始
如&lt;b&gt;、&lt;a&gt;、&lt;img&gt;
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;b&gt;这是一个加粗&lt;/b&gt;</span><br><span class="line">    &lt;a&gt;这是一个超链接&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="HTML-lt-div-gt-元素"><a href="#HTML-lt-div-gt-元素" class="headerlink" title="HTML &lt;div&gt;元素"></a>HTML <code>&lt;div&gt;</code>元素</h2><pre><code>&lt;div&gt;元素也被称为块元素，其主要是组合HTML元素的容器,配合css样式使用
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    #divId p&#123;</span><br><span class="line">       color:blue; </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;divId&quot;&gt;</span><br><span class="line">        &lt;p&gt;Hello World&lt;/p&gt;</span><br><span class="line">        &lt;a&gt;Click me&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="HTML-lt-span-gt-元素"><a href="#HTML-lt-span-gt-元素" class="headerlink" title="HTML &lt;span&gt; 元素"></a>HTML <code>&lt;span&gt;</code> 元素</h2><pre><code>&lt;span&gt;元素是内联元素，可作为文本的容器
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    span&#123;</span><br><span class="line">        color:red</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;divspan&quot;&gt;</span><br><span class="line">        &lt;p&gt;&lt;span&gt;这是一个测试&lt;span&gt;Span 测试&lt;/p&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【HTML知识点】HTML三种样式插入方法]]></title>
      <url>http://www.jiang-yu.cn/2017/02/06/HTML5/HTML%E6%A0%B7%E5%BC%8F%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>闲暇时间学习学习HTML相关知识！</p>
</blockquote>
<a id="more"></a>
<h1 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h1><ol>
<li>外部样式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;xxx.css&quot;&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h1><ol>
<li>内部样式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        background-color:red</span><br><span class="line">    &#125;</span><br><span class="line">    p &#123;</span><br><span class="line">        margin-left:20px</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="内联样式表"><a href="#内联样式表" class="headerlink" title="内联样式表"></a>内联样式表</h1><ol>
<li>内联样式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style=&quot;color:red&quot;&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【HTML知识点】HTML链接的属性]]></title>
      <url>http://www.jiang-yu.cn/2017/02/06/HTML5/HTML%E9%93%BE%E6%8E%A5%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>闲暇时间学习学习HTML相关知识！</p>
</blockquote>
<a id="more"></a>
<h2 id="链接数据"><a href="#链接数据" class="headerlink" title="链接数据"></a>链接数据</h2><ol>
<li>文本链接</li>
<li>图片链接</li>
</ol>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><pre><code>href属性：指向另外一个文档链接
name属性：创建文档内的链接
</code></pre><h2 id="img标签属性"><a href="#img标签属性" class="headerlink" title="img标签属性"></a>img标签属性</h2><pre><code>alt:替换文本属性
width:宽
height:高
</code></pre><h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;http://www.jiang-yu.cn&quot;&gt;点击&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;http://www.jiang-yu.cn&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;xxx.png&quot; alt=&quot;图片说明&quot; width=&apos;50px&apos; height=&apos;50px&apos;&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;!-- 文档内部链接--&gt;</span><br><span class="line">&lt;a name=&quot;tips&quot;&gt;Tips&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#tips&quot;&gt;跳转到Tips锚点&lt;/a&gt;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[【HTML知识点】HTML表格]]></title>
      <url>http://www.jiang-yu.cn/2017/02/06/HTML5/HTML%E8%A1%A8%E6%A0%BC%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>闲暇时间学习学习HTML相关知识！</p>
</blockquote>
<a id="more"></a>
<h2 id="表格属性认识"><a href="#表格属性认识" class="headerlink" title="表格属性认识"></a>表格属性认识</h2><p><code>定义表格　　　　　　&lt;table&gt;</code><br><code>定义表格的标题　　　&lt;caption&gt;</code><br><code>定义表格的表头　　　&lt;th&gt;</code><br><code>定义表格的行　　　　&lt;tr&gt;</code><br><code>定义表格的单元　　　&lt;td&gt;</code><br><code>定义表格的页眉　　　&lt;thead&gt;</code><br><code>定义表格的主体　　　&lt;tbody&gt;</code><br><code>定义表格的页脚　　　&lt;tfoot&gt;</code><br><code>定义表格的列属性　　&lt;col&gt;</code><br><code>定义单元格边距　　　cellpadding=10</code><br><code>定义单元格间距　　　cellspacing=10</code></p>
<h2 id="表格示例"><a href="#表格示例" class="headerlink" title="表格示例"></a>表格示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot;&gt;</span><br><span class="line">    &lt;caption&gt;表格&lt;/caption&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;单元1&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;单元2&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;内容1&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;内容2&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WebSocket实现WEB SSH 实时查看Tomcat的运行日志]]></title>
      <url>http://www.jiang-yu.cn/2016/12/07/WebSocket/Spring_WebSocket%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>　　作为一名后端程序员，每次开发环境部署之后，需要进到后台去查看运行日志的话，都需要用XShell连接服务器，而且最令人讨厌的就是要每次都要用SSH方式输入账号和密码连接生产环境的ECS,最近也在研究这WebSocket，所以决定用WebSocket将实时查看日志的功能整合到项目中去，省得每次查看日志都需要登录到服务器上去查看。</p>
</blockquote>
<a id="more"></a>
<h2 id="一、WebSocket的简介"><a href="#一、WebSocket的简介" class="headerlink" title="一、WebSocket的简介"></a>一、WebSocket的简介</h2><p>　　 WebSocket协议是H5一种新的协议，能够保证浏览器与服务器全双工通信。HTML5定义了WebSocket协议，能更好的节省服务器资源和带宽并达到实时通讯，能够实现服务器向客户端推送消息的功能。</p>
<h2 id="二、使用Spring-WebSocket搭建环境"><a href="#二、使用Spring-WebSocket搭建环境" class="headerlink" title="二、使用Spring WebSocket搭建环境"></a>二、使用Spring WebSocket搭建环境</h2><p>　　本次搭建的工程使用的是Spring MVC + Maven 来实现，项目的结构如下如所示：<br>　　<img src="/uploads/blog/WebSocket/websockt_project_struct.png" alt="project_struct"><br>　　在Spring 4 的版本中集成了WebSockt的功能，在pom.xml中需要加入支持WebSockt的依赖，如下图所示：<br>　　<img src="/uploads/blog/WebSocket/spring-websocket_dependency.png" alt="websockt_dependency"><br>　　其余的Spring MVC项目的配置文件这里不做具体的讲解，这里主要是演示一下Spring+WebSockt实现的功能，后台服务器端主要代码包括：<br>　　控制器：<strong>WebSocketContrller.java</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package com.jhon.rain.controller;</span><br><span class="line">import com.jhon.rain.utils.TailLogThread;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">/**</span><br><span class="line"> * &lt;p&gt;WebSocket的测试类&lt;/p&gt;</span><br><span class="line"> *</span><br><span class="line"> * @author jiangyu</span><br><span class="line"> * @version v1.0</span><br><span class="line"> * @className WebSocketController</span><br><span class="line"> * @create 2016-12-07 20:29</span><br><span class="line"> */</span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/webctrl&quot;)</span><br><span class="line">public class WebSocketController</span><br><span class="line">&#123;</span><br><span class="line">    private Process process;</span><br><span class="line"></span><br><span class="line">    private InputStream inputStream;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">    * 首先进入页面的url</span><br><span class="line">    */</span><br><span class="line">    @RequestMapping(value = &quot;/webssh.do&quot;, method = RequestMethod.GET)</span><br><span class="line">    public String index()</span><br><span class="line">    &#123;</span><br><span class="line">        return &quot;webssh&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">    * 这里是访问页面的时候就会自动调用一次</span><br><span class="line">    */</span><br><span class="line">    @RequestMapping(value = &quot;/socketDemo.do&quot;, method = RequestMethod.GET)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String queryMemberInfo_test()</span><br><span class="line">    &#123;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            String command = &quot;tail -f /home/javaApp/tomcat-app-b/logs/catalina.out&quot;;</span><br><span class="line">            // String command = &quot;cmd /c ipconfig /all&quot;;</span><br><span class="line">            process = Runtime.getRuntime().exec(command);</span><br><span class="line">            inputStream = process.getInputStream();</span><br><span class="line">            TailLogThread thread = new TailLogThread(inputStream);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                if (inputStream != null) inputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception e1)</span><br><span class="line">            &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            if (process != null) process.destroy();</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>　　打印日志的线程类 <strong>TailThread.java</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.jhon.rain.utils;</span><br><span class="line"></span><br><span class="line">import com.jhon.rain.config.TextMessageHandler;</span><br><span class="line">import org.springframework.web.socket.TextMessage;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;p&gt;查询日志的线程类&lt;/p&gt;</span><br><span class="line"> *</span><br><span class="line"> * @author jiangyu</span><br><span class="line"> * @version v1.0</span><br><span class="line"> * @className TailLogThread</span><br><span class="line"> * @create 2016-12-07 20:30</span><br><span class="line"> */</span><br><span class="line">public class TailLogThread extends Thread &#123;</span><br><span class="line">    private BufferedReader reader;</span><br><span class="line"></span><br><span class="line">    public TailLogThread(InputStream in) &#123;</span><br><span class="line">        this.reader = new BufferedReader(new InputStreamReader(in));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        String line;</span><br><span class="line">        try &#123;</span><br><span class="line">            TextMessage message = null;</span><br><span class="line">            while ((line = reader.readLine()) != null) &#123;</span><br><span class="line">                // 将实时日志通过WebSocket发送给客户端，给每一行添加一个HTML换行</span><br><span class="line">                message = new TextMessage(line + &quot;&lt;br&gt;&quot;);</span><br><span class="line">                SpringContextUtil.getComponent(TextMessageHandler.class).sendMessageToUsers(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>　　H5页面<strong>webssh.jsp</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot; %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Enbrands2.0 Web SSH&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;//cdn.bootcss.com/jquery/2.1.4/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;/static/sockjs.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;log-container&quot; style=&quot;height: 800px; overflow-y: scroll; background: #0e0e0e; color: #04f434; padding: 20px;&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;/br&gt;Enbrands 2.0 WEB SSH&lt;/br&gt;</span><br><span class="line">        &lt;/br&gt;Version 1.0&lt;/br&gt;</span><br><span class="line">        &lt;/br&gt;JhonTailLogWeb&lt;/br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button id=&quot;openLog&quot;&gt;开启日志&lt;/button&gt;&lt;/div&gt;&lt;br&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(document).ready(function () &#123;</span><br><span class="line">        var websocket = null;</span><br><span class="line">        if (window[&apos;WebSocket&apos;]) &#123;</span><br><span class="line">            websocket = new WebSocket(&quot;ws://&quot; + window.location.host + &apos;/log&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            websocket = new new SockJS(&apos;/websocket/socketjs&apos;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        websocket.onopen = function (event) &#123;</span><br><span class="line">            console.log(&apos;open&apos;, event);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        websocket.onmessage = function (event) &#123;</span><br><span class="line">            // 接收服务端的实时日志并添加到HTML页面中</span><br><span class="line">            $(&quot;#log-container div&quot;).append(event.data);</span><br><span class="line">            // 滚动条滚动到最低部</span><br><span class="line">            $(&quot;#log-container&quot;).scrollTop($(&quot;#log-container div&quot;).height() - $(&quot;#log-container&quot;).height());</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        /** 事件触发 **/</span><br><span class="line">        $(&quot;#openLog&quot;).bind(&apos;click&apos;,asnyReq);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    /** 异步触发事件**/</span><br><span class="line">    function asnyReq() &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type: &quot;GET&quot;,</span><br><span class="line">            data: &#123;&#125;,</span><br><span class="line">            url: &quot;/webctrl/socketDemo.do?TTL=&quot; + Math.random(),</span><br><span class="line">            datatype: &quot;json&quot;,</span><br><span class="line">            success: function (result) &#123;</span><br><span class="line">                console.log(result);</span><br><span class="line">                if(undefined!=result&amp;&amp;result!=null)</span><br><span class="line">                &#123;</span><br><span class="line">                    if(&quot;0&quot;==result.retCode)&#123;</span><br><span class="line">                        $(&quot;#openLog&quot;).hide();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="三、演示功能"><a href="#三、演示功能" class="headerlink" title="三、演示功能"></a>三、演示功能</h2><p>　　启动项目之后，访问页面localhost:8080/webctrl/webssh.do,<br>　　客户端一：<br>　　<img src="/uploads/blog/WebSocket/client_001.png" alt="websockt_dependency"><br>　　客户端二：<br>　　<img src="/uploads/blog/WebSocket/client_002.png" alt="websockt_dependency"></p>
<h2 id="四、出现问题"><a href="#四、出现问题" class="headerlink" title="四、出现问题"></a>四、出现问题</h2><p>　　由于在本机没有配置nginx代理，所以是可以访问的，但是当移到Linux环境上去后，发现出现了问题，如下图所示，<br>　　<img src="/uploads/blog/WebSocket/websocket-upgrade-null.png" alt="websockt_dependency"><br>　　最后Google后，发现在Nginx要支持WebSockt必须要有特殊的配置：<br>　　<img src="/uploads/blog/WebSocket/upgrade-problem-solved.png" alt="websockt_dependency"></p>
<h2 id="五、源代码"><a href="#五、源代码" class="headerlink" title="五、源代码"></a>五、源代码</h2><p>　　项目的源代码：<a href="https://github.com/YuJhon/TailLog" target="_blank" rel="external">TailLogWebSocket</a><br>　　关于Spring 4中如何使用WebSocket的具体介绍请参考：<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/#websocket" target="_blank" rel="external">WebSockt In Spring 4 </a></p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>　　从今天遇到的这个问题处理时间和效率来看，感觉平时工作中可能只是注重实践，原理性的东西还是需要去补一补的，加油……</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SSH项目--数据没有持久化到DB]]></title>
      <url>http://www.jiang-yu.cn/2016/11/15/Hibernate/SSH--hibernate%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<blockquote>
<p>　　做项目的时候，发现配置注解事务之后，数据还是不能持续化到数据库，调试了好久，网上google后，才知道原来需要有一个重要的配置没有配置，导致事务配置了数据不能持续化到数据库中。</p>
</blockquote>
<a id="more"></a>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>　　SSH整合, Hibernate正确执行了save方法，但是数据没有保存到数据库,最开始以为是事务配置的问题，项目中采用的是@Transaction注解的方式主动的添加事务的，折腾了好久都没有达到预期的效果，最后只能google一下，才发现hibernate的配置出现了问题。
　　</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>　　如果配置了@Transactional，默认org.hibernate.transaction.JDBCTransaction在事务开始时将自动提交设置为false，事务结束或者回滚后再设置为原始的状态。从上面的问题来看，应该是事务操作没有提交，最终数据没有持续化到数据库中，针对此问题可以去了解一下Hibernate中对象的几种状态来结合分析，下面给出最终解决方案。</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>　　Srping的配置文件里的Hibernate的属性配置必须加上：<br>　　<img src="/uploads/blog/Hibernate/hibernate_autocommit.png" alt="hibernate_autocommit"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;hibernateProperties&quot;&gt;</span><br><span class="line">	&lt;props&gt;</span><br><span class="line">		&lt;prop key=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQL5Dialect&lt;/prop&gt;</span><br><span class="line">		&lt;prop key=&quot;current_session_context_class&quot;&gt;thread&lt;/prop&gt;</span><br><span class="line">		&lt;prop key=&quot;hibernate.connection.autocommit&quot;&gt;true&lt;/prop&gt;</span><br><span class="line">	&lt;/props&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></p>
<p>　　事务的管理配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name=&quot;transactionManager&quot; class=&quot;org.springframework.orm.hibernate4.HibernateTransactionManager&quot;&gt;</span><br><span class="line">		&lt;property name=&quot;sessionFactory&quot; ref=&quot;sessionFactory&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; /&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>　　从今天遇到的这个问题处理时间和效率来看，感觉平时工作中可能只是注重实践，原理性的东西还是需要去补一补的，加油……</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Log4j整合模块中的日志分文件存放]]></title>
      <url>http://www.jiang-yu.cn/2016/11/14/Log4j/Log4j%E5%88%86%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>　　以前做项目都是一个项目里面配置一个日志文件，但是最近公司的业务系统是通过功能模块来划分，所以不同模块之间的日志记录的分开存放还是有必要的，方便后期通过日志定位问题，所以就试着用log4j配了一下，日志分类的实现。</p>
</blockquote>
<a id="more"></a>
<p>　　<br>　　日志是应用软件中不可缺少的部分，Apache的开源项目log4j是一个功能强大的日志组件,提供方便的日志记。</p>
<h2 id="Log4j基础知识的预备"><a href="#Log4j基础知识的预备" class="headerlink" title="Log4j基础知识的预备"></a>Log4j基础知识的预备</h2><p>　　Log4j支持两种配置文件格式，一种是XML格式的文件，一种是Java特性文件（键=值）。下面我们介绍使用Java特性文件做为配置文件的方法</p>
<h3 id="log4j的组成部分"><a href="#log4j的组成部分" class="headerlink" title="log4j的组成部分"></a>log4j的组成部分</h3><p>　　Log4j由三个重要的组件构成：日志信息的优先级，日志信息的输出目的地，日志信息的输出格式
　　</p>
<h4 id="１-日志信息的优先级"><a href="#１-日志信息的优先级" class="headerlink" title="１.日志信息的优先级"></a>１.日志信息的优先级</h4><p>　　日志信息的优先级从高到低有ERROR、WARN、INFO、DEBUG，分别用来指定这条日志信息的重要程度</p>
<h5 id="配置根Logger，其语法为："><a href="#配置根Logger，其语法为：" class="headerlink" title="配置根Logger，其语法为："></a>配置根Logger，其语法为：</h5><blockquote>
<p>log4j.rootLogger = [ level ] , appenderName, appenderName, …</p>
</blockquote>
<p>例如：</p>
<blockquote>
<p>log4j.rootLogger=info, ServerDailyRollingFile, stdout</p>
</blockquote>
<p>　　level 是日志记录的优先级，分为OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者您定义的级别。Log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG。
　　</p>
<h4 id="２-日志信息的输出目的地"><a href="#２-日志信息的输出目的地" class="headerlink" title="２.日志信息的输出目的地"></a>２.日志信息的输出目的地</h4><p>　　日志信息的输出目的地指定了日志将打印到控制台还是文件中<br>　　２.１配置日志信息输出目的地Appender，其语法为：</p>
<blockquote>
<p>log4j.appender.stdout=org.apache.log4j.ConsoleAppender</p>
</blockquote>
<p>　　其中，Log4j提供的appender有以下几种：
　　</p>
<blockquote>
<p>org.apache.log4j.ConsoleAppender（控制台），<br>org.apache.log4j.FileAppender（文件），<br>org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），<br>org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），<br>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</p>
</blockquote>
<h4 id="３-日志信息的输出格式-布局"><a href="#３-日志信息的输出格式-布局" class="headerlink" title="３.日志信息的输出格式(布局)"></a>３.日志信息的输出格式(布局)</h4><p>　　日志输出格式则控制了日志信息的显示内容</p>
<blockquote>
<p>org.apache.log4j.HTMLLayout（以HTML表格形式布局），<br>org.apache.log4j.PatternLayout（可以灵活地指定布局模式），<br>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），<br>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</p>
</blockquote>
<p>　　Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，打印参数如下： %m 输出代码中指定的消息：</p>
<blockquote>
<p>%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL<br>%r 输出自应用启动到输出该log信息耗费的毫秒数<br>%c 输出所属的类目，通常就是所在类的全名<br>%t 输出产生该日志事件的线程名<br>%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”<br>%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921<br>%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)</p>
</blockquote>
<h2 id="log4j分文件存储实现方案"><a href="#log4j分文件存储实现方案" class="headerlink" title="log4j分文件存储实现方案"></a>log4j分文件存储实现方案</h2><p>　　为了上面摘要描述的功能，我们可以自定义一个日志Appender来实现</p>
<h3 id="自定义Appender"><a href="#自定义Appender" class="headerlink" title="自定义Appender"></a>自定义Appender</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.jifenn.framework.frame.log;</span><br><span class="line"></span><br><span class="line">import org.apache.log4j.DailyRollingFileAppender;</span><br><span class="line">import org.apache.log4j.Priority;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;p&gt;功能描述&lt;/br&gt; 自定义日志Appender &lt;/p&gt;</span><br><span class="line"> * </span><br><span class="line"> * @className JFDailyRollingFileAppender</span><br><span class="line"> * @author jiangyu</span><br><span class="line"> * @date 2016年11月14日 上午9:52:14</span><br><span class="line"> * @version v1.0</span><br><span class="line"> */</span><br><span class="line">public class JFDailyRollingFileAppender extends DailyRollingFileAppender</span><br><span class="line">&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean isAsSevereAsThreshold(Priority priority)</span><br><span class="line">    &#123;</span><br><span class="line">        /** 只判断相同的范围（层级）**/</span><br><span class="line">        return this.getThreshold().equals(priority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置log4j-properties文件"><a href="#配置log4j-properties文件" class="headerlink" title="配置log4j.properties文件"></a>配置log4j.properties文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=info, ServerDailyRollingFile, stdout</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender </span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout </span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d %-5p %c&#123;1&#125;(%L) [%X&#123;ip&#125;] - %M %m%n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log4j.logger.com.jifenn.schedule = info,error,coreInfo,coreError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log4j.appender.coreInfo = com.jifenn.framework.frame.log.JFDailyRollingFileAppender</span><br><span class="line"></span><br><span class="line">log4j.appender.coreInfo.File = /web/ebsapp/logs/schedule/info/info.log</span><br><span class="line"></span><br><span class="line">log4j.appender.coreInfo.layout = org.apache.log4j.PatternLayout</span><br><span class="line"></span><br><span class="line">log4j.appender.coreInfo.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class="line"></span><br><span class="line">log4j.appender.coreInfo.Threshold = INFO </span><br><span class="line">log4j.additivity.coreInfo=false  </span><br><span class="line"></span><br><span class="line">log4j.appender.coreError = com.jifenn.framework.frame.log.JFDailyRollingFileAppender</span><br><span class="line">log4j.appender.coreError.File = /web/ebsapp/logs/schedule/error/error.log</span><br><span class="line">log4j.appender.coreError.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.coreError.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class="line">log4j.appender.coreError.Threshold = ERROR</span><br><span class="line">log4j.additivity.coreError=false</span><br><span class="line"></span><br><span class="line">log4j.logger.com.jifenn.draw = info,error,webInfo,webError</span><br><span class="line"></span><br><span class="line">log4j.logger.webInfo = info,webInfo</span><br><span class="line">log4j.appender.webInfo = com.jifenn.framework.frame.log.JFDailyRollingFileAppender</span><br><span class="line">log4j.appender.webInfo.File = /web/ebsapp/logs/draw/info/info.log</span><br><span class="line">log4j.appender.webInfo.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.webInfo.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class="line">log4j.appender.webInfo.Threshold = INFO</span><br><span class="line">log4j.additivity.webInfo=false</span><br><span class="line"></span><br><span class="line">log4j.logger.webError = error,webError</span><br><span class="line">log4j.appender.webError = com.jifenn.framework.frame.log.JFDailyRollingFileAppender</span><br><span class="line">log4j.appender.webError.File = /web/ebsapp/logs/draw/error/error.log</span><br><span class="line">log4j.appender.webError.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.webError.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class="line">log4j.appender.webError.Threshold = ERROR</span><br><span class="line">log4j.additivity.webError=false</span><br><span class="line"></span><br><span class="line">log4j.logger.com.jifenn.ebs.gift = info,error,webInfo,webError</span><br><span class="line"></span><br><span class="line">log4j.logger.webInfo = info,webInfo</span><br><span class="line">log4j.appender.webInfo = com.jifenn.framework.frame.log.JFDailyRollingFileAppender</span><br><span class="line">log4j.appender.webInfo.File = /web/ebsapp/logs/gift/info/info.log</span><br><span class="line">log4j.appender.webInfo.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.webInfo.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class="line">log4j.appender.webInfo.Threshold = INFO</span><br><span class="line">log4j.additivity.webInfo=false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log4j.logger.webError = error,webError</span><br><span class="line">log4j.appender.webError = com.jifenn.framework.frame.log.JFDailyRollingFileAppender</span><br><span class="line">log4j.appender.webError.File = /web/ebsapp/logs/gift/error/error.log</span><br><span class="line">log4j.appender.webError.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.webError.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class="line">log4j.appender.webError.Threshold = ERROR</span><br><span class="line">log4j.additivity.webError=false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log4j.logger.com.jifenn.ebs.mall = info,error,webInfo,webError</span><br><span class="line"></span><br><span class="line">log4j.logger.webInfo = info,webInfo</span><br><span class="line">log4j.appender.webInfo = com.jifenn.framework.frame.log.JFDailyRollingFileAppender</span><br><span class="line">log4j.appender.webInfo.File = /web/ebsapp/logs/mall/info/info.log</span><br><span class="line">log4j.appender.webInfo.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.webInfo.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class="line">log4j.appender.webInfo.Threshold = INFO</span><br><span class="line">log4j.additivity.webInfo=false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log4j.logger.webError = error,webError</span><br><span class="line">log4j.appender.webError = com.jifenn.framework.frame.log.JFDailyRollingFileAppender</span><br><span class="line">log4j.appender.webError.File = /web/ebsapp/logs/mall/error/error.log</span><br><span class="line">log4j.appender.webError.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.webError.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class="line">log4j.appender.webError.Threshold = ERROR</span><br><span class="line">log4j.additivity.webError=false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log4j.logger.com.jifenn.ebs.common = info,error,webInfo,webError</span><br><span class="line"></span><br><span class="line">log4j.logger.webInfo = info,webInfo</span><br><span class="line">log4j.appender.webInfo = com.jifenn.framework.frame.log.JFDailyRollingFileAppender</span><br><span class="line">log4j.appender.webInfo.File = /web/ebsapp/logs/common/info/info.log</span><br><span class="line">log4j.appender.webInfo.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.webInfo.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class="line">log4j.appender.webInfo.Threshold = INFO</span><br><span class="line">log4j.additivity.webInfo=false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log4j.logger.webError = error,webError</span><br><span class="line">log4j.appender.webError = com.jifenn.framework.frame.log.JFDailyRollingFileAppender</span><br><span class="line">log4j.appender.webError.File = /web/ebsapp/logs/common/error/error.log</span><br><span class="line">log4j.appender.webError.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.webError.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span><br><span class="line">log4j.appender.webError.Threshold = ERROR</span><br><span class="line">log4j.additivity.webError=false</span><br></pre></td></tr></table></figure>
<h3 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h3><h4 id="查看模块的日志文件夹"><a href="#查看模块的日志文件夹" class="headerlink" title="查看模块的日志文件夹"></a>查看模块的日志文件夹</h4><p>　　<img src="/uploads/blog/Log4j/Log4j_Split_File.png" alt="split_file">
　　</p>
<h4 id="查看模块的日志文件夹下的不同日志等级文件夹"><a href="#查看模块的日志文件夹下的不同日志等级文件夹" class="headerlink" title="查看模块的日志文件夹下的不同日志等级文件夹"></a>查看模块的日志文件夹下的不同日志等级文件夹</h4><p>　　<img src="/uploads/blog/Log4j/Log4j_Split_File_log_level.png" alt="split_level"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring+Log4j+ActiveMQ实现简单的日志收集]]></title>
      <url>http://www.jiang-yu.cn/2016/11/14/Log4j/Log4j%E8%BF%9C%E7%A8%8B%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<blockquote>
<p>　　上一篇中讲解过log4j的一些基础知识以及日志文件的分模块存储，但是项目在生产环境的时候，日志刷屏看起来非常不舒服，于是就想通过远程来收集别的系统日志来实现日志和业务系统分离的想法。本文中主要采用的是ActiveMQ消息中间件来实现远程日志打印。</p>
</blockquote>
<a id="more"></a>
<p>　　随着业务系统的发展，日志数据也必须要十分重视，日志在生产环境中系统问题的排查有着非常重要的作用。下面就来一步一步来实现一个远程日志系统。
　　</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>　　首先要定义一个日志的监听器，业务系统生产(produce)日志信息到统一消息中间件（ActiveMQ），然后日志系统不断的从ActiveMQ中去消费(consume)信息。
　　</p>
<h2 id="日志系统搭建"><a href="#日志系统搭建" class="headerlink" title="日志系统搭建"></a>日志系统搭建</h2><p>　　日志系统的实现非常简单，就是要定义一个消息的监听器，不断的从ＭＱ中去获取生产者（业务系统）产生的日志消息，可以参考<a href="http://activemq.apache.org/how-do-i-use-log4j-jms-appender-with-activemq.html" target="_blank" rel="external">MQ的官方文档</a><br>　　下面我们就搭建一个简单的日志系统：<br>　　<img src="/uploads/blog/Log4j/log4j_jms_project_struct.png" alt="project_stuct"><br>　　项目基于Maven+Spring MVC，就一个日志监听器类，还有一个spring的配置文件，提出核心代码和配置文件如下<br>　　<strong>LogMessageListener.java</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package com.rain.jhon;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import javax.jms.Message;</span><br><span class="line">import javax.jms.MessageListener;</span><br><span class="line"></span><br><span class="line">import org.apache.activemq.command.ActiveMQObjectMessage;</span><br><span class="line">import org.apache.log4j.spi.LoggingEvent;</span><br><span class="line"></span><br><span class="line">import com.jifenn.framework.util.TimeUtil;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;p&gt;功能描述&lt;/br&gt; 日志信息的监听 &lt;/p&gt;</span><br><span class="line"> * @className  LogMessageListener</span><br><span class="line"> * @author  jiangyu</span><br><span class="line"> * @date  2016年11月14日 下午1:41:20</span><br><span class="line"> * @version  v1.0</span><br><span class="line"> */</span><br><span class="line">public class LogMessageListener implements MessageListener</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void onMessage(Message message)</span><br><span class="line">    &#123;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            /** receive log event in your consumer **/</span><br><span class="line">            LoggingEvent event = (LoggingEvent)((ActiveMQObjectMessage)message).getObject();</span><br><span class="line">            StringBuilder logStr = new StringBuilder();</span><br><span class="line">            logStr</span><br><span class="line">            .append(&quot;Logging project:[ &quot;)</span><br><span class="line">            .append(TimeUtil.Date2Sring(new Date(event.getTimeStamp()), TimeUtil.PATTERN_DATE_7))</span><br><span class="line">            .append(&quot; ]--[Class]: &quot;)</span><br><span class="line">            .append(event.getLoggerName())</span><br><span class="line">            .append(&quot;, [ThreadName] : &quot;)</span><br><span class="line">            .append(event.getThreadName())</span><br><span class="line">            .append(&quot;,Log Level--[&quot;)</span><br><span class="line">            .append(event.getLevel())</span><br><span class="line">            .append(&quot;] :&quot;)</span><br><span class="line">            .append(event.getMessage());</span><br><span class="line">            /** 打印出日志 **/</span><br><span class="line">            System.out.println(logStr.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Spring.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </span><br><span class="line">    xsi:schemaLocation=&quot;</span><br><span class="line">        http://www.springframework.org/schema/beans </span><br><span class="line">        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=&quot;jmsTemplate&quot; class=&quot;org.springframework.jms.core.JmsTemplate&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;connectionFactory&quot; class=&quot;org.springframework.jms.connection.SingleConnectionFactory&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;targetConnectionFactory&quot; ref=&quot;targetConnectionFactory&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;targetConnectionFactory&quot; class=&quot;org.apache.activemq.ActiveMQConnectionFactory&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;brokerURL&quot; value=&quot;tcp://localhost:61616&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">	&lt;bean id=&quot;topicDestination0&quot; class=&quot;org.apache.activemq.command.ActiveMQTopic&quot;&gt;</span><br><span class="line">        &lt;constructor-arg name=&quot;name&quot; value=&quot;EbsLogTopic&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;jmsContainer0&quot; class=&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot; /&gt;</span><br><span class="line">         &lt;!-- &lt;property name=&quot;destination&quot; ref=&quot;queueDestination&quot; /&gt;  --&gt;</span><br><span class="line">         &lt;property name=&quot;destination&quot; ref=&quot;topicDestination0&quot; /&gt;</span><br><span class="line">         &lt;property name=&quot;messageListener&quot; ref=&quot;logMessageListener&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &lt;bean id=&quot;topicDestination1&quot; class=&quot;org.apache.activemq.command.ActiveMQTopic&quot;&gt;</span><br><span class="line">        &lt;constructor-arg name=&quot;name&quot; value=&quot;logTopic&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;jmsContainer1&quot; class=&quot;org.springframework.jms.listener.DefaultMessageListenerContainer&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot; /&gt;</span><br><span class="line">         &lt;!-- &lt;property name=&quot;destination&quot; ref=&quot;queueDestination&quot; /&gt;  --&gt;</span><br><span class="line">         &lt;property name=&quot;destination&quot; ref=&quot;topicDestination1&quot; /&gt;</span><br><span class="line">         &lt;property name=&quot;messageListener&quot; ref=&quot;logMessageListener&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;bean id=&quot;logMessageListener&quot; class=&quot;com.rain.jhon.LogMessageListener&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p>
<p>web.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app id=&quot;WebApp_ID&quot; version=&quot;3.0&quot;</span><br><span class="line">	xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">	xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;classpath:spring.xml&lt;/param-value&gt;</span><br><span class="line">    &lt;/context-param&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- Use to load spring.xml --&gt;</span><br><span class="line">    &lt;listener&gt;</span><br><span class="line">        &lt;listener-class&gt;</span><br><span class="line">            org.springframework.web.context.ContextLoaderListener</span><br><span class="line">        &lt;/listener-class&gt;</span><br><span class="line">    &lt;/listener&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;welcome-file-list&gt;</span><br><span class="line">        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span><br><span class="line">    &lt;/welcome-file-list&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure></p>
<p>　　上面三个文件就构成了一个简单的日志监听系统，但是还少了一个重要的部分，那就是activemq，由于我是在windows平台上，所以可以直接使用，到apache官网下载windows版本的ActiveMQ，这里我使用windows-64版本：<br>　　<img src="/uploads/blog/Log4j/log4j_activeMQ.png" alt="activeMq"><br>　　启动activeMQ,<br>　　<img src="/uploads/blog/Log4j/start_activeMQ.png" alt="activeMq"><br>　　然后进入后台管理页面，<a href="http://localhost:8161,用户名/密码:admin/admin" target="_blank" rel="external">http://localhost:8161,用户名/密码:admin/admin</a><br>　　<img src="/uploads/blog/Log4j/activeMQ_index.png" alt="activeMq"><br>　　启动日志系统，查看activeMQ中的Topic,可以发现我们配置的两个Topic,如下图所示<br>　　<img src="/uploads/blog/Log4j/spring_jms_config.png" alt="activeMq"><br>　　<img src="/uploads/blog/Log4j/start_log_system.png" alt="activeMq"></p>
<h2 id="业务系统配置log4j"><a href="#业务系统配置log4j" class="headerlink" title="业务系统配置log4j"></a>业务系统配置log4j</h2><p>　　上面的配置都ok后，我们就来配置业务系统中的log4j到jms的连接,假设我们有业务系统Maven+spring+…</p>
<h3 id="log4j-properties的配置："><a href="#log4j-properties的配置：" class="headerlink" title="log4j.properties的配置："></a>log4j.properties的配置：</h3><p>　　这个配置可以参考官网的配置：<br>　　<img src="/uploads/blog/Log4j/active_document_01.png" alt="activeMq"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=info,jms,stdout</span><br><span class="line"></span><br><span class="line">log4j.logger.org.apache.activemq=INFO,stdout</span><br><span class="line"></span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender </span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout </span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%d %-5p %c&#123;1&#125;(%L) [%X&#123;ip&#125;] - %M %m%n</span><br><span class="line"></span><br><span class="line">###########################################################################################</span><br><span class="line">## Configure &apos;jms&apos; appender. You&apos;ll also need jndi.properties file in order to make it work</span><br><span class="line">log4j.appender.jms=org.apache.log4j.net.JMSAppender</span><br><span class="line">log4j.appender.jms.InitialContextFactoryName=org.apache.activemq.jndi.ActiveMQInitialContextFactory</span><br><span class="line">log4j.appender.jms.ProviderURL=tcp://localhost:61616</span><br><span class="line">log4j.appender.jms.TopicBindingName=EbsLogTopic</span><br><span class="line">log4j.appender.jms.TopicConnectionFactoryBindingName=ConnectionFactory</span><br><span class="line">log4j.appender.jms.layout.ConversionPattern=%d %-5p %c&#123;1&#125;(%L) [%X&#123;ip&#125;] - %M %m%n</span><br></pre></td></tr></table></figure></p>
<h3 id="jndi-properties的配置"><a href="#jndi-properties的配置" class="headerlink" title="jndi.properties的配置"></a>jndi.properties的配置</h3><p>　　配置JNDI信息（实例工程结构和配置文件）<br>　　<img src="/uploads/blog/Log4j/business_config_info.png" alt="activeMq"></p>
<h2 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h2><p>　　启动日志监听系统<br>　　<img src="/uploads/blog/Log4j/start_log_system02.png" alt="activeMq"><br>　　启动业务系统，访问接口，打印测试日志信息：<br>　　<img src="/uploads/blog/Log4j/demo_result.png" alt="activeMq">
　　</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>　　至此，就愉快的实现了远程打日志了，虽然看起来有点麻烦，但是实现了是不是有一种成就感呢？哈哈，加油。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 Lambda表达式了解和应用]]></title>
      <url>http://www.jiang-yu.cn/2016/11/12/Jdk/Java8--Lambda%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>作为一名Java程序员，想想Jdk 9都快要出来了，必须要马上学习一下Jdk 8中的一些新特性了，早就听说了Java8中的Lambda表达式非常强大，一直都处于懒散状态，真的需要开始充充新知识了！</p>
</blockquote>
<a id="more"></a>
<p>　　Java项目的升级是必然的，目前工作中的大部分项目都是在Jdk7的环境下使用，但是为了后期的发展，Jdk 8 是必然的一个选择，而且Java 8中的lambda(闭包)和虚拟扩展方法（default Method）都已经被炒得沸沸扬扬了，所以本文就来认识和介绍一下相关知识，学习函数式编程思想来开阔自己的思路。</p>
<h1 id="Lambda表达式初识"><a href="#Lambda表达式初识" class="headerlink" title="Lambda表达式初识"></a>Lambda表达式初识</h1><p>　　首先从一个简单的例子入手，来查看一下lambda表达式的效果，下面分别是java7和java8中创建一个线程的示例代码，<br>　　java7实现方式：<br>　　<img src="/uploads/blog/Jdk/java8/java_7_runnable.png" alt="java7"><br>　　java8实现方式：<br>　　<img src="/uploads/blog/Jdk/java8/java_lambda_runnable.png" alt="java8"><br>　　从上面的实例代码中可以看出，Java8的lambda表达式确实是非常的简洁和方便，代码中使用() -&gt; {} 替代匿名类–Runnable()接口。</p>
<h1 id="Lambda表达式语法"><a href="#Lambda表达式语法" class="headerlink" title="Lambda表达式语法"></a>Lambda表达式语法</h1><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>　　Functional Interface–(函数式接口FI)，FI的定义很简单——任何接口，如果只有唯一一个抽象方法，那么这个接口就可以定义成为一个FI.例如：Runnable,Comparator接口都加上了一个@FunctionalInterface注解，编译器为了能够确保一个接口满足FI的要求，Java8提供了这个注解。<br>　　<img src="/uploads/blog/Jdk/java8/java8_functionalInterface.png" alt="java8 FI Define"><br>　　<img src="/uploads/blog/Jdk/java8/java8_functionInterface01.png" alt="java8 FI Compare"></p>
<h2 id="Lambda语法"><a href="#Lambda语法" class="headerlink" title="Lambda语法"></a>Lambda语法</h2><p>　　如上图所示，Lambda表达式的使用方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str.sort((word1, word2) -&gt; &#123;</span><br><span class="line">    return Integer.compare(word1.length(), word2.length());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>　　如果Lambda表达式的代码块只是return后面跟一个表达式，则可以简化为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str.sort(</span><br><span class="line">    (word1, word2) -&gt; Integer.compare(word1.length(), word2.length())</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>　　[注意]表达式后面是没有分号,如果只有一个参数，那么包围参数的圆括号可以省略：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str.forEach(temp -&gt; &#123;</span><br><span class="line">    System.out.println(temp);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>　　如果表达式不需要参数但也必须有圆括号，eg：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Executors.newFixedThreadExecutor().execute(</span><br><span class="line">    // Runnable</span><br><span class="line">    () -&gt; &#123;/* do something. */&#125; </span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>　　Method References–(方法引用),有时候Lambda表达式只包含一个简单的方法调用，所以在这种情况下就可以将Lambda表达式简化为方法引用。方法引用包含四种方式：<br>　　<img src="/uploads/blog/Jdk/java8/java8_lambda_method_reference.png" alt="java8 FI Define"></p>
<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; ints = Arrays.asList(1, 2, 3);</span><br><span class="line">ints.sort(Integer::compare);</span><br></pre></td></tr></table></figure>
<h3 id="某个特定对象的实例方法"><a href="#某个特定对象的实例方法" class="headerlink" title="某个特定对象的实例方法"></a>某个特定对象的实例方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">words.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h3 id="某个类的实例方法"><a href="#某个类的实例方法" class="headerlink" title="某个类的实例方法"></a>某个类的实例方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">words.stream().map(word -&gt; word.length()); // lambda</span><br><span class="line">words.stream().map(String::length); // method reference</span><br></pre></td></tr></table></figure>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// lambda</span><br><span class="line">words.stream().map(word -&gt; &#123;</span><br><span class="line">    return new StringBuilder(word);</span><br><span class="line">&#125;);</span><br><span class="line">// constructor reference</span><br><span class="line">words.stream().map(StringBuilder::new);</span><br></pre></td></tr></table></figure>
<h1 id="Lambda表达式使用场景"><a href="#Lambda表达式使用场景" class="headerlink" title="Lambda表达式使用场景"></a>Lambda表达式使用场景</h1><p>　　任何可以接受一个FI实例的地方，都可以用Lambda表达式。比如，虽然上面给出的例子都是把Lambda表达式当作方法参数传递，但实际上我们也可以定义变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Runnable task = () -&gt; &#123;</span><br><span class="line">    // do something</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Comparator&lt;String&gt; cmp = (s1, s2) -&gt; &#123;</span><br><span class="line">    return Integer.compare(s1.length(), s2.length());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="预定义函数式接口"><a href="#预定义函数式接口" class="headerlink" title="预定义函数式接口"></a>预定义函数式接口</h2><p>　　Java8除了给Runnable，Comparator等接口打上了@FunctionalInterface注解之外，还预定义了一大批新的FI。这些接口都在java.util.function包里：<br><img src="/uploads/blog/Jdk/java8/java8_functionInterface04.png" alt="java8 FI Define"><br>下面简单介绍其中的几个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface Predicate&lt;T&gt; &#123;</span><br><span class="line">    boolean test(T t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>　　Predicate用来判断一个对象是否满足某种条件，比如，单词是否由六个以上字母组成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">words.stream()</span><br><span class="line">    .filter(word -&gt; word.length() &gt; 6)</span><br><span class="line">    .count();</span><br></pre></td></tr></table></figure></p>
<p>　　Function表示接收一个参数，并产生一个结果的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface Function&lt;T, R&gt; &#123;</span><br><span class="line">    R apply(T t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>　　下面的例子将集合里的每一个整数都乘以2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ints.stream().map(x -&gt; x * 2);</span><br></pre></td></tr></table></figure></p>
<p>　　Consumer表示对单个参数进行的操作，前面例子中的forEach()方法接收的参数就是这种操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface Consumer&lt;T&gt; &#123;</span><br><span class="line">    void accept(T t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="默认方法-Default-Methods"><a href="#默认方法-Default-Methods" class="headerlink" title="默认方法(Default Methods)"></a>默认方法(Default Methods)</h2><p>　　Java8对很多老的类库进行了增强，给它们配备了Lambda武器。比如前面例子中用到的forEach()方法，实际上是添加到Iterable接口中的。而多次出现的stream()方法，则是添加在了Collection接口里，为了保证API的向后兼容性，Java8对接口的语法进行了较大的调整，增加了 默认方法（Default Methods）。例如forEach()方法的实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface Iterable&lt;T&gt; &#123;</span><br><span class="line">	...</span><br><span class="line">	default void forEach(Consumer&lt;? super T&gt; action) &#123;</span><br><span class="line">		Objects.requireNonNull(action);</span><br><span class="line">		for (T t : this) &#123;</span><br><span class="line">			action.accept(t);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>　　<img src="/uploads/blog/Jdk/java8/java8_default_method_01.png" alt="java8 FI Compare"><br>　　<img src="/uploads/blog/Jdk/java8/java8_default_method_02.png" alt="java8 FI Compare"></p>
<h3 id="接口的静态方法"><a href="#接口的静态方法" class="headerlink" title="接口的静态方法"></a>接口的静态方法</h3><p>　　除了抽象方法和默认方法，从Java8开始，接口也可以有静态（static）方法了。有了这个语法，我们就可以把和接口相关的帮助方法（Helper Methods）直接定义在接口里了。比如Function接口就定义了一个工厂方法indentity()：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public interface Function&lt;T, R&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">    /**</span><br><span class="line">     * Returns a function that always returns its input argument.</span><br><span class="line">     *</span><br><span class="line">     * @param &lt;T&gt; the type of the input and output objects to the function</span><br><span class="line">     * @return a function that always returns its input argument</span><br><span class="line">     */</span><br><span class="line">    static &lt;T&gt; Function&lt;T, T&gt; identity() &#123;</span><br><span class="line">        return t -&gt; t;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="变量捕获"><a href="#变量捕获" class="headerlink" title="变量捕获"></a>变量捕获</h3><p>　　和内部类一样，Lambda也可以访问外部（词法作用域）变量，规则基本一样 。Java8之前， 内部类只能访问final类型的变量 ，Java8放宽了这种限制，只要变量实际上不可变（effectively final）就可以。换句话说，如果你给变量加上final关键字编译器也不报错，那么去掉final关键字后，它就是effectively final的。看下面的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int tmp = 100;</span><br><span class="line">Runnable x = new Runnable() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>　　在Java8之前，a必须是final的才能被x看到。下面用Lambda表达式重写上面的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int tmp = 100;</span><br><span class="line">Runnable x = () -&gt; &#123;</span><br><span class="line">    System.out.println(tmp);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>　　Java8后出现了默认方法（Default Methods），如果你对抽象类比较熟悉的话，那么你可能会想java8的默认方法和抽象类有点像，但是这两者之间还是有些联系和区别的，请看下图：<br><img src="/uploads/blog/Jdk/java8/java8_default_method_03.png" alt="java8 FI Compare"></p>
<p>#结束语<br>　　Java8的Lambda才真正让Java朝着函数式编程迈进了一大步。</p>
<p>　　</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ActiveMQ启动报错--ISC服务惹的祸]]></title>
      <url>http://www.jiang-yu.cn/2016/11/09/ActiveMQ/ActiveMQ-ICS_Service/</url>
      <content type="html"><![CDATA[<blockquote>
<p>  本文主要记录一下在windows上使用ActiveMQ过程中出现的一个错误，而且出现过两次，方便后期备忘和快速查询。</p>
</blockquote>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　最近做项目中遇到了要使用异步的方式去实现某些业务场景，所以就选择了ActiveMQ+Camel来实现，开始的时候可以正常使用，但是在使用一段时间后，在windows上偶尔会出现启动的时候报错，开始一直都以为是端口冲突导致的问题，但是改过很多端口号后还是不行，最后还是依赖强大的Google找到了答案，所以记录一下解决方法。</p>
<h2 id="第一步：问题复现"><a href="#第一步：问题复现" class="headerlink" title="第一步：问题复现"></a>第一步：问题复现</h2><p>　　在windows上点击ActiveMQ中bin目录下：bin/win64/activemq.bat 启动MQ服务，出现如下报错：</p>
<blockquote>
<p>Failed to bind to server socket:tcp://0.0.0.0:61626 due to: java.net.BindException: Address already in use: JVM_Bind</p>
</blockquote>
<p>　　如下图所示<br>　　<img src="/uploads/blog/ActiveMQ/activeMQ_error_msg.png" alt="JDK_CONFG_CHECK"></p>
<h2 id="第二步：问题排查"><a href="#第二步：问题排查" class="headerlink" title="第二步：问题排查"></a>第二步：问题排查</h2><p>　　初步判断是：端口号被占用了，所以先查看一下端口“61626” 被哪个服务给占用了，然后直接kill掉那个进程，如下图所示：<br>　　<img src="/uploads/blog/ActiveMQ/error_problem_check_01.png" alt="JDK_CONFG_CHECK"><br>　　然而，结果让我们很失望，nothing,没有任何进程占用该端口号，所以我想既然61626端口被占用了，那我就再换一个端口号，但是还是不行，还是报同样的错误。
　　</p>
<h2 id="第三步："><a href="#第三步：" class="headerlink" title="第三步："></a>第三步：</h2><p>　　通过netstat -aon | findstr “61616” 查找端口被谁占用了，可是一直没有找到，最后只能去Google大法那里去寻求帮助了，Google说是 Internet Connection Sharing (ICS)服务占用，kill了这个服务，启动就Ok了。</p>
<blockquote>
<p>微软官方服务解释：<br>　　BITS can force a dial-up connection for home networks that use Microsoft Internet Connection Sharing if Connection Sharing is configured to dial out when computers on the network access the Internet. To prevent a forced dial-up connection, disable the Establish a dial-up connection whenever a computer on my network attempts to access the Internet option on the Connection Sharing host computer that shares its Internet connection.<br>　　Computers connected to the Connection Sharing host computer assume they have a network connection, so BITS will try to transfer files. If the dial-up option is disabled on the host computer and the host computer does not have an active connection, the transfers will fail with a transient error. BITS will retry the transfers periodically.
　　</p>
<h2 id="第四步：问题解决"><a href="#第四步：问题解决" class="headerlink" title="第四步：问题解决"></a>第四步：问题解决</h2><p>　　Google后，立即打开windows的任务管理器，找到了相应的“嫌疑人”进程，直接kill掉<br>　　<img src="/uploads/blog/ActiveMQ/kill_ICS_Service.png" alt="JDK_CONFG_CHECK"><br>　　果然，kill掉ICS那个服务之后，ActiveMQ又可以正常启动了。
　　</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>　　每天记录平时工作中遇到的问题，一点一点积累，加油，Fighting !!!</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVN入门教程（三）--上传文件到SVN服务器]]></title>
      <url>http://www.jiang-yu.cn/2016/09/02/SVN/SVN%20Learn%20Basic%2003/</url>
      <content type="html"><![CDATA[<blockquote>
<p>  本文主要介绍如何在自己的电脑上用SVN客户端上传文件到SVN服务器。</p>
</blockquote>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　通过前面的<a href="http://www.jiang-yu.cn/2016/09/01/SVN/SVN%20Learn%20Basic02/">SVN入门教程（二）–下载文件到本地计算机</a>,我们可以知道如何从SVN上下载文件了，是不是很鸡冻呢，哈哈，但是可能突然有一天，你的领导叫你写一个公司的新员工入职流程指导的文档并且需要上传到SVN服务器，因为这个文档要给到你们公司的研发部的新入职的员工小江以及以后新入职的员工，所以你需要将文档保存到公司一个公共的存放文档的地方——SVN文件服务器（就是一个统一管理公司的各个部门的相关文档），本篇博文就是指导你如何将一个新建的文件上传到SVN服务器。</p>
<h2 id="第一步：确定你需要上传文件到服务器中的位置"><a href="#第一步：确定你需要上传文件到服务器中的位置" class="headerlink" title="第一步：确定你需要上传文件到服务器中的位置"></a>第一步：确定你需要上传文件到服务器中的位置</h2><p>　　所谓的“文件服务器中的位置”可以理解为百度云盘中的一个目录，如下图所示：<br>　　<img src="/uploads/blog/SVN/svn_0020.png" alt="JDK_CONFG_CHECK"><br>　　理解了上面的概念之后，确定了要存放文件的目录，比如：(<a href="https://www.jiang-yu.cn/svn/document/新员工天地),下面我们就开始第二步了。">https://www.jiang-yu.cn/svn/document/新员工天地),下面我们就开始第二步了。</a></p>
<h2 id="第二步：添加文件操作"><a href="#第二步：添加文件操作" class="headerlink" title="第二步：添加文件操作"></a>第二步：添加文件操作</h2><p>　　首先，有了第一步中的链接，比如：【<a href="https://www.jiang-yu.cn/svn/document/新员工天地】">https://www.jiang-yu.cn/svn/document/新员工天地】</a> 这个目录之后，你需要按照教程二中的步骤，将该文件夹下的文件先下载到本地目录中，比如：HR_DOCUMENT目录下，然后将自己编辑好了文件复制到该目录下（或者直接在这个目录下创建一个新的文件，编辑好之后保存），这里以：aaa.doc文件为例，如下图所示：<br>　　<img src="/uploads/blog/SVN/svn_0021.png" alt="JDK_CONFG_CHECK"><br>　　然后，执行SVN的添加操作，如下图所示：<br>　　<img src="/uploads/blog/SVN/svn_0022.png" alt="JDK_CONFG_CHECK"><br>　　最后，执行添加操作完成之后，我们可以查看文件的变化，会在文件上出现一个蓝色的加号，<br>　　【文件的变化】如下图所示：<br>　　<img src="/uploads/blog/SVN/svn_0023.png" alt="JDK_CONFG_CHECK"><br>　　【文件夹的变化–如果有修改（就是和服务器上的文件有不一样，比如：修改、新增）和 服务器上的文件不一致】如下图所示：<br>　　<img src="/uploads/blog/SVN/svn_0024.png" alt="JDK_CONFG_CHECK"></p>
<h2 id="第三步：提交文件菜单操作"><a href="#第三步：提交文件菜单操作" class="headerlink" title="第三步：提交文件菜单操作"></a>第三步：提交文件菜单操作</h2><p>　　上面两步正确操作之后，在文件上右键点击出现菜单中选择SVN Commit，如下图所示：<br>　　<img src="/uploads/blog/SVN/svn_0025.png" alt="JDK_CONFG_CHECK"></p>
<h2 id="第四步：填写提交备注信息"><a href="#第四步：填写提交备注信息" class="headerlink" title="第四步：填写提交备注信息"></a>第四步：填写提交备注信息</h2><p>　　最后，出现一个填写备注的弹出框，这里需要说明一下，就是每次提交文件（也就是对文件有修改操作，新增操作，删除操作的话都需要填写操作的原因和影响的文件）都要填写操作备注，养成这样的好习惯，对后面操作是有帮助的，如下图所示，可以按照给出的模板操作：</p>
<blockquote>
<p>【提 交 人】：江xx<br>【文件说明】：新增了新员工入职指导文件<br>【修改说明】：<br>　　1.修改了xxx文件<br>　　2.删除了xxx文件<br>【影响范围】：</p>
</blockquote>
<p>　　<img src="/uploads/blog/SVN/svn_0026.png" alt="JDK_CONFG_CHECK"></p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>　　通过上面的四步操作，基本上可以掌握了如何将自己写好的文档资源提交到SVN服务器了，然后你就可以将链接地址：<a href="https://www.jiang-yu.cn/svn/document/aaa.doc">https://www.jiang-yu.cn/svn/document/aaa.doc</a> 发给新入职的员工小江了，哈哈，是不是很简单啊，如果想更深层次的了解SVN的使用，请继续关注哦，后面会给出SVN编辑文件后提交的教程。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVN入门教程（二）--下载文件到本地计算机]]></title>
      <url>http://www.jiang-yu.cn/2016/09/01/SVN/SVN%20Learn%20Basic02/</url>
      <content type="html"><![CDATA[<blockquote>
<p>  本文主要介绍利用SVN客户端从服务器上下载文件到本地计算机。</p>
</blockquote>
<a id="more"></a>
<p>　　在看此教程之前，请先安装好SVN客户端到自己的电脑上，否则请移步<a href="http://www.jiang-yu.cn/2016/09/01/SVN/SVN%20Learn%20Basic%2001/">SVN入门教程（一）–软件的安装</a>。在安装好了SVN客户端后，下面我们就开始SVN的使用之旅吧！Come on…这次讲解的是如何从SVN服务器上下载我们需要的文件资源。</p>
<h2 id="第一步：创建文件夹"><a href="#第一步：创建文件夹" class="headerlink" title="第一步：创建文件夹"></a>第一步：创建文件夹</h2><p>　　首先，我们要在自己的电脑上创建一个文件夹（任意位置，任意名称），用来存放从SVN服务器中下载的文件，例如：我需要下载公司的人资部的一些文档资源，第一步，创建一个文件夹（HR_DOCUMENT）<br>下面的教程使用的是A_SVN_DEMO这个文件名，如下图所示：<br>　　<img src="/uploads/blog/SVN/svn_0011.png" alt="create_des_folder"></p>
<h2 id="第二步：检出资源文件，填写链接地址"><a href="#第二步：检出资源文件，填写链接地址" class="headerlink" title="第二步：检出资源文件，填写链接地址"></a>第二步：检出资源文件，填写链接地址</h2><p>　　文件夹创建好之后，在文件夹上右键–&gt;SVN Checkout–&gt;出现如下的弹出框，这个弹出框需要填写一个链接地址(一般情况下，如果你是下载文件的话，你的领导或者同事都会给你一个链接的地址，例如：<a href="https://www.jiang-yu.cn/svn/document),如图所示，将https://www.jiang-yu.cn/svn/document（这里你需要替换成别人给你的链接地址）">https://www.jiang-yu.cn/svn/document),如图所示，将https://www.jiang-yu.cn/svn/document（这里你需要替换成别人给你的链接地址）</a> 填写到URL of repository下的输入框中，然后点击ok即可<br>　　<img src="/uploads/blog/SVN/svn_0012.png" alt="JDK_CONFG_CHECK"></p>
<h2 id="第三步：等待文件资源下载，查看下载的进度和情况"><a href="#第三步：等待文件资源下载，查看下载的进度和情况" class="headerlink" title="第三步：等待文件资源下载，查看下载的进度和情况"></a>第三步：等待文件资源下载，查看下载的进度和情况</h2><p>　　<img src="/uploads/blog/SVN/svn_0013.png" alt="JDK_CONFG_CHECK"></p>
<h2 id="第四步：查看文件是否下载下来了"><a href="#第四步：查看文件是否下载下来了" class="headerlink" title="第四步：查看文件是否下载下来了"></a>第四步：查看文件是否下载下来了</h2><p>　　<img src="/uploads/blog/SVN/svn_0014.png" alt="JDK_CONFG_CHECK">
　　</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>　　哎呀，一不小心，本文就结束了，是不是很简单呢，只需要简单的四步就可以从SVN服务器中，获取你所需要的文件，这里很多的操作都直接在截图中有备注（比较懒–不想打字，哈哈），好了，透露一下，本教程会有连载哦，下一篇会写一下如何在本地计算机上传文件到服务器上，如果想掌握SVN的基本使用，请多多关注哈<del>~</del></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVN入门教程（一）--软件的安装]]></title>
      <url>http://www.jiang-yu.cn/2016/09/01/SVN/SVN%20Learn%20Basic%2001/</url>
      <content type="html"><![CDATA[<blockquote>
<p>  本文主要介绍SVN以及如何安装SVN软件。</p>
</blockquote>
<a id="more"></a>
<p>　　博主有点懒哦，还没有开始写这篇文章，后续补上。。。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat开启压缩功能]]></title>
      <url>http://www.jiang-yu.cn/2016/08/09/Tomcat/Tomcat_Gzip_On/</url>
      <content type="html"><![CDATA[<blockquote>
<p>为了减小前端页面加载静态资源的时间，通常实际项目中都需要给Tomcat开启压缩功能！</p>
</blockquote>
<a id="more"></a>
<p>　　首先，找到tomcat的目录conf,打开server.xml文件，修改Connector节点，默认配置如下：<br>　　　　　　<img src="/uploads/blog/Tomcat/tomcat_gzip_close.png" alt="default_tomcat_connector_config"><br>　　修改配置文件中的connector节点内容如下图：<br>　　<img src="/uploads/blog/Tomcat/tomcat_gzip_on.png" alt="default_tomcat_connector_config"><br>　　<figure class="highlight plain"><figcaption><span>port="8082" protocol="HTTP/1.1"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　　　connectionTimeout=&quot;20000&quot;</span><br><span class="line">　　　　redirectPort=&quot;8443&quot;</span><br><span class="line">　　　　compression=&quot;on&quot;</span><br><span class="line">　　　　compressionMinSize=&quot;2048&quot;</span><br><span class="line">　　　　noCompressionUserAgents=&quot;gozilla,traviata&quot;</span><br><span class="line">　　　　compressableMimeType=&quot;text/html,text/xml,text/javascript,application/x-javascript,application/javascript,text/css,text/plain&quot;</span><br><span class="line">　　/&gt;</span><br></pre></td></tr></table></figure></p>
<p>　　<br>　　然后，重启tomcat服务器，浏览器F12打开，访问一个静态文件，查看响应头：<br>　　<img src="/uploads/blog/Tomcat/tomcat_gzip_on_browser.png" alt="default_tomcat_connector_config"></p>
<pre><code>小伙伴也许会感觉到奇怪，为啥这里服务器是Nginx，哈哈，这是因为我配置了代理，更多nginx配置信息请后续关注博主吧 ！
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java入门--IDE工具的选择（二）]]></title>
      <url>http://www.jiang-yu.cn/2016/08/09/JAVA_BASIC/JAVA_BASIC_DAY02/</url>
      <content type="html"><![CDATA[<blockquote>
<p>  温故知新：Java入门级系列之IDE的选择，选择一个好的工具往往可以达到事半功倍效果。</p>
</blockquote>
<a id="more"></a>
<p>　　作为一个即将入门的java程序猿，你肯定听说过Eclipse吧！如果不知道也没有关系，可以理解，因为你马上就要去认识一下它了,它的魅力接触久了就自然发现了，恩恩，请不要随便就爱上了它哦。<br>　　首先，下载Eclipse,Here <a href="http://www.eclipse.org/downloads/" title="Title" target="_blank" rel="external">Click Me To DownLoad Page</a><br>　　下载下来后（貌似最新的版本是提供一个exe文件来安装Eclipse,而且必须支持jdk1.8以上，所以暂时不用），Eclipse是不需要安装的（可以向任何一个Java研发狗索要一个），直接解压就可以使用，是不是现在感觉——wow,这么简单，是的，就是这么简单。解压之后目录结构如下图：<br>　　<strong>New Version Eclipse Install Interface(jdk 1.8 + )</strong>:<br>　　step01、<img src="/uploads/blog/javabasic/lesson2/new_install_interface.png" alt="JDK_CONFG_CHECK"><br>　　step02、<img src="/uploads/blog/javabasic/lesson2/install_02.png" alt="JDK_CONFG_CHECK"><br>　　<strong>Customer Version Eclipse Directroy(jdk 1.7 or lower)</strong>:<br>　　<img src="/uploads/blog/javabasic/lesson2/install_01.png" alt="JDK_CONFG_CHECK"><br>　　点击eclipse就可以开始撸代码之旅了，开始界面：<br>　　<img src="/uploads/blog/javabasic/lesson2/start_intf.png" alt="JDK_CONFG_CHECK"><br>　　哈哈，是不是有点激动了呢，仔细等待一下吧，然后会出现一个提示框，要求选择一个工作空间（workspace）,如下图所示：<br>　　<img src="/uploads/blog/javabasic/lesson2/switch_workspace.png" alt="JDK_CONFG_CHECK"></p>
<blockquote>
<p>[Tips]所谓的工作空间，就是coding之后的代码存放的位置</p>
</blockquote>
<p>　　好的，上面的步骤顺利完成之后，就看到了长得一般般的软件界面了，不要对他失去信心，它是个很强大的东西，下面开始慢慢介绍一下Eclipse基本的操作<br>　　step one: 新建一个工程<br>　　<img src="/uploads/blog/javabasic/lesson2/new_project_001.png" alt="JDK_CONFG_CHECK"><br>　　<img src="/uploads/blog/javabasic/lesson2/new_project_002.png" alt="JDK_CONFG_CHECK"><br>　　<img src="/uploads/blog/javabasic/lesson2/new_project_003.png" alt="JDK_CONFG_CHECK"><br>　　step two:新建包名（命名规则：公司域名反着写，然后跟上项目名称）<br>　　比如：公司——www.jiangyu.com  项目名称：enbrands<br>　　    包名：com.jiangyu.enbrands<br>　　<img src="/uploads/blog/javabasic/lesson2/new_project_004.png" alt="JDK_CONFG_CHECK"><br>　　<img src="/uploads/blog/javabasic/lesson2/package_001.png" alt="JDK_CONFG_CHECK"><br>　　<img src="/uploads/blog/javabasic/lesson2/package_002.png" alt="JDK_CONFG_CHECK"><br>　　新建完成之后，工程目录结构如下：<br>　　<img src="/uploads/blog/javabasic/lesson2/package_003.png" alt="JDK_CONFG_CHECK"><br>　　step three: 新建一个类（Java中所有的文件都是一个类或者一个文件中包含多个类）<br>　　[Tips]如果不知道类，是怎么一回事的话，就简单理解：类就是对一类东西的抽象。<br>　　新建一个类：右键包名–New–Class<br>　　<img src="/uploads/blog/javabasic/lesson2/new_class_001.png" alt="JDK_CONFG_CHECK"><br>　　<img src="/uploads/blog/javabasic/lesson2/new_class_002.png" alt="JDK_CONFG_CHECK"><br>　　<img src="/uploads/blog/javabasic/lesson2/new_class_003.png" alt="JDK_CONFG_CHECK"><br>　　到此，一个类已经创建完成了，下面就开始一个简单的代码，即：入门级的Hello World<br>　　<img src="/uploads/blog/javabasic/lesson2/new_class_004.png" alt="JDK_CONFG_CHECK"><br>　　编写代码，输出“Hello World”<br>　　<img src="/uploads/blog/javabasic/lesson2/new_class_005.png" alt="JDK_CONFG_CHECK"><br>　　最后，简单的一行代码就撸完了，下面开始运行一下吧，是不是有点小鸡冻啊，哈哈<br>　　<img src="/uploads/blog/javabasic/lesson2/debug_class_001.png" alt="JDK_CONFG_CHECK"><br>　　<img src="/uploads/blog/javabasic/lesson2/debug_class_002.png" alt="JDK_CONFG_CHECK"><br>　　小伙伴，是否看到了“Hello World” 呢！好的，今天的入门级别——IDE的选择就结束了，期待下一篇博客吧！<br>　　如果对Java是一片空白的话，建议先熟悉一下Java的基本语法和类的概念，Finghting……
　　
　　
　　
　　</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nginx配置代理--搭建线上和开发环境]]></title>
      <url>http://www.jiang-yu.cn/2016/08/09/Ngnix/nginx_server_config/</url>
      <content type="html"><![CDATA[<blockquote>
<p>使用nginx配置反向代理，80端口映射不同的内网web服务器。</p>
</blockquote>
<a id="more"></a>
<p>　　上次写过一篇博文是关于使用<a href="http://www.jiang-yu.cn/2016/03/06/Ngnix/Tomcat%20+%20Ngnix%20+%20Memcached%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%20Session%E5%85%B1%E4%BA%AB/">Nginx+Tomcat实现负载均衡</a>,这里面有介绍怎么用源码安装nginx，这里就不在重复了，今天我们要实现的是同一个端口号（80）映射到服务器上的不同Tomcat中，实现开发环境和线上环境的分离，当然了，如果你们公司不缺money,可以另外开一台Server.<br>　　首先，查看一下nginx是否安装好了：<br>　　<img src="/uploads/blog/Ngnix/check_nginx_is_install.png" alt="nginx_install_check"><br>　　从上面可以看出来，nginx已经安装好了，而且还有版本信息，然后我们进入到nginx的安装目录，修改nginx的配置文件：nginx.conf<br>　　<img src="/uploads/blog/Ngnix/ngnix_location.png" alt="nginx_install_dir"></p>
<ul>
<li>开启压缩配置<br><img src="/uploads/blog/Ngnix/nginx_gzip_on.png" alt="nginx_install_dir"><br>如果不配置压缩的资源类型，貌似对前端资源的压缩没有起到效果，所以配置的时候需要注意一下：记得配置要压缩文件的类型。</li>
<li><p>配置Server节点<br> 在上一篇博文中，我们只配置了一个Server节点来实现负载均衡，但实际情况可能不是这样的。最近在做一个项目，因为项目中需要用到facebook的api调用，所以公司就购买了一台能够google的服务器，由于服务器是阿里的只对外开放一个80端口，所以我们要实现开发和线上环境分开的话，必须要配置代理来实现跳转——也就是使用nginx(也可以使用Apache来实现–后期来介绍Apache的使用)<br><strong>线上环境的配置</strong>：<br> 默认使用80端口号，该服务器也分配了一个线上的域名xxx.xx.com,所以线上环境的配置非常简单，直接使用默认的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">upstream myClusterServer&#123;</span><br><span class="line">              server 127.0.0.1:8081 ;</span><br><span class="line">              #server 127.0.0.1:8082 weight=5;</span><br><span class="line">              #server 127.0.0.1:8083 weight=5;</span><br><span class="line">        &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        charset utf-8;</span><br><span class="line">        location  / &#123;</span><br><span class="line">                root   html;</span><br><span class="line">                index  index.html index.htm;</span><br><span class="line">                proxy_pass http://myClusterServer;</span><br><span class="line">		proxy_connect_timeout 500s;</span><br><span class="line">  		proxy_read_timeout 500s;</span><br><span class="line">  		proxy_send_timeout 500s;</span><br><span class="line">                proxy_redirect default;</span><br><span class="line">                #proxy_connect_timeout 10;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p> <img src="/uploads/blog/Ngnix/default_80_server.png" alt="nginx_install_dir"><br> <strong>开发环境配置：</strong><br> 由于开发环境没有分配域名，所以我们可以通过修改hosts文件来实现映射(修改/etc/hosts  127.0.0.1 test.com  然后访问的机器也将服务器的ip地址映射为test.com)，基本配置如下：<br> <strong>nginx.conf</strong>: <img src="/uploads/blog/Ngnix/dev_80_server.png" alt="nginx_install_dir"><br> <strong>/etc/hosts</strong>: <img src="/uploads/blog/Ngnix/test_com.png" alt="nginx_install_dir"></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  test.com;  </span><br><span class="line"></span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line">    location  / &#123;</span><br><span class="line">            root   html;</span><br><span class="line"> 	index  index.html index.htm;</span><br><span class="line">proxy_pass http://127.0.0.1:8082;</span><br><span class="line">proxy_set_header           Host $host;</span><br><span class="line">proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">proxy_set_header           X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">  	proxy_redirect default;</span><br><span class="line">proxy_connect_timeout 10;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>配置错误页面处理<br> <img src="/uploads/blog/Ngnix/nginx_default_error_config.png" alt="nginx_install_dir"></p>
</li>
<li><p>配置超时时间</p>
<blockquote>
<p>keepalive_timeout  200s;<br> fastcgi_connect_timeout 300s;<br> fastcgi_send_timeout 300s;<br> fastcgi_read_timeout 300s;<br> fastcgi_buffer_size 128k;<br> fastcgi_buffers 8 128k;<br> fastcgi_busy_buffers_size 256k;<br> fastcgi_temp_file_write_size 256k; </p>
</blockquote>
</li>
</ul>
<p>　　<img src="/uploads/blog/Ngnix/nginx_connect_timeout.png" alt="nginx_install_dir"></p>
<p>　　到此，nginx的基本配置也就完成了.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat内存配置以及项目发布配置]]></title>
      <url>http://www.jiang-yu.cn/2016/08/09/Tomcat/Tomcat_Mem_Virt_Config/</url>
      <content type="html"><![CDATA[<blockquote>
<p> 作为Java程序猿，我们不得不掌握Tomcat的基本配置，本文将简单讲述一下实际项目中tomcat的一般配置。</p>
</blockquote>
<a id="more"></a>
<p>　　作为Java开发中的一员，每天和打交道的服务器最频繁的必然是Tomcat了，貌似有一种“Tomcat坑我千百遍，我待Tomcat如初恋”的情愫哈，废话不多说了，下面首先介绍一下最常用的配置吧！</p>
<ul>
<li>配置Tomcat内存<br>每次发布项目之后，热部署的时候是否都会出现 memery leak 的提示日志，或者惨一点的，服务器直接崩了，这个<br>问题出现的频率一般都比较高，那么怎么摆脱这个错误的困扰呢？很简单，只需要简单的一个配置就可以搞定：<br>打开tomcat的位置，找到tomcat目录下的bin目录<br>　　<img src="/uploads/blog/Tomcat/vim_catalina.sh.png" alt="ls_file"><br>然后打开catalina.sh,在文件的顶部加上如下配置（具体参数需要根据实际服务器的配置而定）<br>　<figure class="highlight plain"><figcaption><span>-XX:MaxPermSize=256m -Xms1024m -Xmx1024m -Dfile.encoding=UTF8 -Dsun.jnu.encoding=UTF8" ```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　![memory_config](/uploads/blog/Tomcat/tomcat_memory_config.png)</span><br><span class="line">然后保存文件，就可以了！</span><br><span class="line"> - 配置Tomcat虚拟目录</span><br><span class="line"> 项目上线之后，一般访问链接中一般是不会带项目名称的，那该怎么办了，首先你可能想到的是使用Apache或者是Nginx配置代理来实现，但是在实际开发中，我们就没有必要这样搞了，这里有一种简单的方式：</span><br><span class="line">打开tomcat目录下的conf目录，修改server.xml文件，在Host节点中添加一行配置：</span><br><span class="line"></span><br><span class="line">　```&lt;Context docBase=&quot;projectName&quot; path=&quot;/&quot; reloadable=&quot;true&quot; crossContext=&quot;true&quot; sessionCookieName=&quot;projectName&quot;/&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>如下图所示：<br>　　<img src="/uploads/blog/Tomcat/virtual_directory.png" alt="memory_config"></p>
<p>　　好了，tomcat的基本配置，注意的是，第二条配置，一般在上传war包之后，启动tomcat就会自动解压出来，而且会出现一个ROOT文件夹，此时我们要停掉服务器，然后删除ROOT文件夹，重启服务器就可以了！<strong>记住哦，这一步非常重要</strong>！后续会继续更新Tomcat的高级配置！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java入门--环境的准备（一）]]></title>
      <url>http://www.jiang-yu.cn/2016/08/08/JAVA_BASIC/JAVA_BASIC_DAY01/</url>
      <content type="html"><![CDATA[<blockquote>
<p>  温故知新：Java入门级系列之环境的搭建，找回入门时的感觉。</p>
</blockquote>
<a id="more"></a>
<p>第一步：下载JDK<br>　　This is <a href="http://www.oracle.com/technetwork/java/javase/downloads/java-archive-downloads-javase7-521261.html#jdk-7u80-oth-JPR" title="Title" target="_blank" rel="external">JDK7 DOWNLOAD LINK CLICK ME</a> .</p>
<p>第二步：安装jdk<br>　　双击下载好的jdk文件，傻瓜式的安装下去，下一步，下一步，最终安装完成<br>　　最终安装目录：<br>　　<img src="/uploads/blog/javabasic/jdk_location.png" alt="JDK_LOCATION"><br>　　路径说明<br>　　<img src="/uploads/blog/javabasic/java_home_path.png" alt="JDK_LOCATION"><br>第三步：配置环境变量<br>　　步骤：桌面右键我的电脑–&gt;属性–&gt;高级系统变量–&gt;环境变量–&gt;设置JAVA_HOME–&gt;设置PATH环境变量<br>　　１、<img src="/uploads/blog/javabasic/config_path_step01.png" alt="JDK_CONFG_CHECK"><br>　　２、<img src="/uploads/blog/javabasic/config_path_step02.png" alt="JDK_CONFG_CHECK"><br>　　３、<img src="/uploads/blog/javabasic/config_path_step03.png" alt="JDK_CONFG_CHECK"><br>　　４、<img src="/uploads/blog/javabasic/config_path_step04.png" alt="JDK_CONFG_CHECK"><br>　　５、<img src="/uploads/blog/javabasic/config_path_step05.png" alt="JDK_CONFG_CHECK"></p>
<p>第四步：验证java环境是否安装成功<br>　　好的，经过了前面的三步，我们的环境变量就配置完成了，现在我们来检验一下我们是否配置成功好了<br>　　首先，win+R 输入cmd<br>　　<img src="/uploads/blog/javabasic/win_R.png" alt="JDK_CONFG_CHECK"><br>　　然后，在cmd命令行中输入java-version，如下图<br>　　<img src="/uploads/blog/javabasic/jdk_varify_demo.png" alt="JDK_CONFG_CHECK"></p>
<p>　　哈哈，简单吧!好的，安装好Jdk环境后，说明你向成功迈进了一小步，是不是有点小激动呢，嘻嘻，休息一下吧，下一篇将开始撸代码了哈,你准备好了么！！！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySql修改默认的字符集]]></title>
      <url>http://www.jiang-yu.cn/2016/06/26/MySQL/MySQL%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Linux安装完MySql后，如果没有配置字符编码的话,默认的是latin1,而开发环境一般都是使用utf-8，所有如果不修改的话会出现乱码问题.<br><a id="more"></a></p>
</blockquote>
<p>　　由于linux下MySQL的默认安装目录分布在不同的文件下；不像windows一样放在同一目录下，只需修改其中的my.ini文件，重起后就生效了；所以先来看看linux下MySQL的数据库文件、配置文件和命令文件分别在不同的目录。</p>
<ul>
<li>修改之前的编码方式：<br>　　<img src="/uploads/blog/MySQL/mysql_security/security_16.png" alt="my.cnf"><br>　　如果在客户端使用<figure class="highlight plain"><figcaption><span>character_set_system=utf8```,只能是一种指标不治本的方法，如下图</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">　　![my.cnf](/uploads/blog/MySQL/mysql_security/security_17.png)</span><br><span class="line">- 查找linux下MySql的主配置文件：</span><br><span class="line">　　首先我们使用find命令查找一下mysql的配置文件位置：```find / -iname &apos;*.cnf&apos; -print```，如下图所示</span><br><span class="line">　　![my.cnf](/uploads/blog/MySQL/mysql_security/security_18.png)</span><br><span class="line">　　然后修改配置文件中的编码方式：</span><br><span class="line">   ```vim /etc/my.cnf</span><br></pre></td></tr></table></figure></li>
</ul>
<p>　　修改default_character_set=utf-8</p>
<ul>
<li>修改之后<br>　　<img src="/uploads/blog/MySQL/mysql_security/security_19.png" alt="my.cnf"></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux修改IP配置]]></title>
      <url>http://www.jiang-yu.cn/2016/06/26/Linux/Linux%E4%BF%AE%E6%94%B9IP%E5%9C%B0%E5%9D%80%E4%B8%BA%E9%9D%99%E6%80%81%E5%9C%B0%E5%9D%80/</url>
      <content type="html"><![CDATA[<p>　　每天学一点Linux命令–修改Linux系统的ip地址<br><a id="more"></a></p>
<figure class="highlight plain"><figcaption><span>/etc/sysconfig/network-scripts/ifcfg-eth0``` </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;DEVICE=eth0 　　　　　网卡对应的设备别名</span><br><span class="line">TYPE=Ethernet　　　　　网络类型</span><br><span class="line">UUID=xxxxxx-xxxx-xxxx-xxxx-xxxxxxxx</span><br><span class="line">BOOTPROTO=static　　　网卡获得ip地址的方式（默认是dhcp）</span><br><span class="line">DNS1=192.168.1.1 　　　　　DNS</span><br><span class="line">IPV6INIT=no</span><br><span class="line">USERCTL=no</span><br><span class="line">IPADDR=192.168.1.132    　　　　ip地址</span><br><span class="line">NETMASK=255.255.255.0 　　　子网掩码</span><br><span class="line">GATEWAY=192.168.1.1 　　　　　　网关</span><br><span class="line">HWADDR=XX:XX:XX:XX:XX　　　　MAC地址</span><br><span class="line">ONBOOT=yes　系统启动时是否设置此网络接口，默认设置为yes</span><br><span class="line"></span><br><span class="line">修改完成之后，重启network服务</span><br><span class="line">```service network restart</span><br></pre></td></tr></table></figure>
<p>ok，使用 <code>ifconfig eth0</code> 查看一下是否生效</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySql授权]]></title>
      <url>http://www.jiang-yu.cn/2016/06/26/MySQL/MySQL%E6%8E%88%E6%9D%83%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Linux安装完MySql后，一般root用户是不配置给远程机器访问的，所以要重新创建一个和root权限相当的用户来管理.<br><a id="more"></a></p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3></blockquote>
<ul>
<li>创建数据库<br> mysql&gt;create database jhonyu01DB;<br> <img src="/uploads/blog/MySQL/mysql_security/security_01.png" alt="创建数据库"></li>
</ul>
<h3 id="授权操作"><a href="#授权操作" class="headerlink" title="授权操作"></a>授权操作</h3><ul>
<li>创建用户（jhonyu01|jhonyuread）<ul>
<li>用户jhonyu01授权localhost可以访问<br>mysql&gt;grant all privileges on jhonyu01DB.* to jhonyu01@localhost identifiedby ‘jhonyu01’ WITH GRANT OPTION;<br>mysql&gt;flush privileges;<br><img src="/uploads/blog/MySQL/mysql_security/security_02.png" alt="jhonyu01"></li>
<li>用户jhonyuread没有进行任何授权<br>mysql&gt;insert into mysql.user(Host,User,Password) values(‘localhost’,’jhonyuread’,password(‘jhonyuread’));<br>mysql&gt;flush privileges;<br>mysql&gt;exit<br>[root@localhost ~]# mysql -ujhonyuread -p<br><img src="/uploads/blog/MySQL/mysql_security/security_03.png" alt="jhonyuread"></li>
</ul>
</li>
<li>授权用户jhonyu01所有ip可以访问<br><img src="/uploads/blog/MySQL/mysql_security/security_04.png" alt="jhonyu01"></li>
<li><p>客户端测试</p>
<ul>
<li>使用jhonyu01登录<br><img src="/uploads/blog/MySQL/mysql_security/security_05.png" alt="jhonyu01"></li>
<li>使用jhonyuread登录<br><img src="/uploads/blog/MySQL/mysql_security/security_06.png" alt="jhonyuread"></li>
</ul>
</li>
<li><p>jhonyuread授予权限之后<br><img src="/uploads/blog/MySQL/mysql_security/security_07.png" alt="jhonyuread"><br><img src="/uploads/blog/MySQL/mysql_security/security_08.png" alt="jhonyuread"><br><img src="/uploads/blog/MySQL/mysql_security/security_09.png" alt="jhonyuread"></p>
</li>
<li>查看自己授权<br><img src="/uploads/blog/MySQL/mysql_security/security_10.png" alt="jhonyuread"><br><img src="/uploads/blog/MySQL/mysql_security/security_11.png" alt="jhonyuread"><br><img src="/uploads/blog/MySQL/mysql_security/security_12.png" alt="jhonyuread"></li>
<li>创建topic表<br> （略）</li>
<li>查询表结构<br><img src="/uploads/blog/MySQL/mysql_security/security_13.png" alt="jhonyuread"></li>
<li>两个不同的用户操作数据库<br><img src="/uploads/blog/MySQL/mysql_security/security_14.png" alt="jhonyuread"><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3> MySql的用户操作权限简单的介绍了下，有写描述不清楚的地方，希望大家多多指正，文中大部分都是用图片里代替，图片操作清晰而且直接明了，fighting…</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySql连接阻塞解决办法]]></title>
      <url>http://www.jiang-yu.cn/2016/06/26/MySQL/MySQL%E8%BF%9E%E6%8E%A5%E9%98%BB%E5%A1%9E%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Error Message:message from server: “Host ‘x.x.x.x’ is blocked because of many connection errors; unblock with ‘mysqladmin flush-hosts’”<br><a id="more"></a></p>
</blockquote>
<h3 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h3><p>　　前段时间公司开发环境出现服务器上部署的项目启动的时候出现上述错误提示，从上面的错误原因可以看出–<strong>同一个IP在短时间产生过多（超过mysql数据库max_connection_errors的最大值）中断的数据库连接而导致的阻塞.</strong>
　　</p>
<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><ul>
<li><p>修改Mysql配置文件的max_connection_errors数量</p>
<ul>
<li>查看max_connection_errors<figure class="highlight plain"><figcaption><span>variables like '%max_connection_errors%';```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 修改max_connection_errors的数量 </span><br><span class="line">```set global max_connect_errors = 500;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用mysqladmin flush-hosts命令清理一下hosts文件</p>
<ul>
<li>查找出mysqladmin位置<figure class="highlight plain"><figcaption><span>mysqladmin```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 进到相关目录下执行以下命令：</span><br><span class="line">```/usr/bin/mysqladmin flush-hosts -hx.x.x.x -P3306 -uroot -prootpwd;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>直接在数据库执行下面命令：</p>
<ul>
<li>必须要有root权限<br><code>flush hosts;</code></li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux修改系统默认启动模式]]></title>
      <url>http://www.jiang-yu.cn/2016/06/14/Linux/%E4%BF%AE%E6%94%B9Linux%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>　　为了避免每次开机都是进入到图形化界面，可以修改配置文件使得Linux默认为命令行模式启动。<br><a id="more"></a></p>
<p>　　下面有两种方式来实现：</p>
<ul>
<li><p>临时生效：在图形化界面下可以打开Terminal终端，切换到root用户，输入init3即可切换到命令行模式，如果要再次回到图形化界面，可以使用startx就可以了。</p>
</li>
<li><p>永久生效：修改 /etc/inittab  将启动模式修改为3<br>其中的数字可以设置为（0~6）<br>0 - 表示关闭系统（不要把默认设置成0）<br>1 - 单用户模式<br>2 - 多用户模式，没有NFS服务<br>3 - 多用户文本模式，是标准的运行级<br>5 - 图形模式<br>6 - 系统重新启动</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux关机操作命令]]></title>
      <url>http://www.jiang-yu.cn/2016/06/14/Linux/Linux%E5%85%B3%E6%9C%BA%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>　　每天学一点Linux命令<br><a id="more"></a></p>
<blockquote>
<p>halt 立刻关机<br>poweroff 立刻关机<br>shutdown -h now 立刻关机(root用户使用)<br>shutdown -h 10 10分钟后自动关机<br>如果是通过shutdown命令设置关机的话，可以用shutdown -c命令取消重启<br>推荐使用shutdown命令</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VIM编辑器基础命令（一）]]></title>
      <url>http://www.jiang-yu.cn/2016/06/14/VIM/vim_command_01%20/</url>
      <content type="html"><![CDATA[<p>　　在Linux下操作文件，不会VIM命令那就犹如战士上战场没带枪，所以作为一个合格的程序猿，必须要对基本的VI命令非常熟练的使用，本文开始将记录一系列VI命令的使用，方便快速查阅。<br><a id="more"></a></p>
<ul>
<li>vi编辑器三种常用的模式：<br>　1.命令模式：就是用<code>vi/vim 文件名</code> 进入文件后的模式<br>　2.插入模式（i）：就是在命令模式下按下ｉ或者ａ即可进入<br>　3.ex（扩展）模式：就是使用’:xxxx’ 方式<br>　在任何一种模式下按Esc键都会回到命令模式</li>
<li>基础命令<ul>
<li><strong>命令模式</strong>：<br>  a　在光标后插入文本<br>  i　在光标前插入文本<br>  o　在当前行的下面插入新行<br>  dd　删除整行<br>  u　撤销上一操作<br>  yy　复制当前行<br>  p　粘贴<br>  n+yy　复制n行<br>  r　替换当前字符<br>  /　查找关键字，按n键在关键字之间进行切换</li>
<li><strong>扩展模式</strong>：<br>  :w　保存当前修改<br>  :q　退出<br>  :q!　强制退出，不保存修改<br>  :x　保存并退出，相当于:wq<br>  :set number　显示行号，或setnum<br>  :set nonumber　关闭行号显示</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ JMeter内存溢出解决办法]]></title>
      <url>http://www.jiang-yu.cn/2016/06/13/JMeter/JMeter%20OutOfMemory%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>　 最近用JMeter对Web进行压测，（JMeter也是用Java编写的一款工具）然而JMeter跑一段时间之后出现了内存溢出现象，问了下Google，虽然解决方式非常简单，但还是记录下来方便后面再次遇到就可以查找自己的知识库了！<br><a id="more"></a><br>　　为了应对618,要对我们的web应用进行压测，当然作为压测的工具首选是JMeter，因为它不大且不需要安装，配置也比较简单易懂。<br>　　在开始压测一段时间内是正常的，但是到运行到一定时间后就会出现，JMeter软件本身自己卡死，后台就一直报内存溢出的错误，如下图：<img src="/uploads/blog/JMeter/JMeter_OutOfMemory.png" alt="JMeter OutOfMemory"></p>
<p>Google结果是：修改JMeter.bat/JMeter.sh文件中的配置即可</p>
<ul>
<li><p><strong>windows</strong>环境下，修改jmeter.bat：<br><code>set HEAP=-Xms256m -Xmx256m
set NEW=-XX:NewSize=128m -XX:MaxNewSize=128m</code><br>改为：<br><code>set HEAP=-Xms256m -Xmx1024m
set NEW=-XX:NewSize=128m -XX:MaxNewSize=512m</code></p>
</li>
<li><p><strong>linux</strong>环境下，修改jmeter.sh：<br><code>java $JVM_ARGS -Xms1G -Xmx5G -XX:MaxPermSize=512m       -Dapple.laf.useScreenMenuBar=true -jar `dirname $0`/ApacheJMeter.jar &quot;$@&quot;</code></p>
</li>
</ul>
<p>　　由于我是在windows下测试，按照上面的配置，果然可以了，<del>^</del>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ MySql InnoDB Lock(二)--Intention Locks]]></title>
      <url>http://www.jiang-yu.cn/2016/06/04/MySQL/InnoDB/InnoDB_Intention_Lock/</url>
      <content type="html"><![CDATA[<p>　　在上一篇的<code>Shared And Exclusive Locks</code>中提及到InnoDB默认实现的是<code>Row-Level Lock</code>(行级锁)，同时InnoDB中也支持多种粒度类型的锁，本文介绍的<code>Intention Locks</code>（意向锁）就是一个体现，意向锁的主要目的是表明当前事务将要或者正在对表中的记录加锁。<br><a id="more"></a><br>　　在MySQL InnoDB引擎中的行级锁只有明确的指定主键的时候才会在被筛选记录(即：<code>where keyAttr(主键)=xxx</code>)上执行Row Lock，否则将会执行<br>Table Lock.</p>
<blockquote>
<p>摘抄自：MySql Doc</p>
<blockquote>
<p>InnoDB supports multiple granularity locking which permits coexistence of row-level locks and locks on entire tables. To make locking at multiple granularity levels practical, additional types of locks called intention locks are used. Intention locks are table-level locks in InnoDB that indicate which type of lock (shared or exclusive) a transaction will require later for a row in that table. There are two types of intention locks used in InnoDB (assume that transaction T has requested a lock of the indicated type on table t):</p>
</blockquote>
</blockquote>
<p>大概意思是：InnoDB引擎允许<code>Row Level</code> 锁和<code>Table Level</code> 锁 支持多粒度的锁,这种锁称作：<code>Intention Locks</code>,Intention Locks（意向锁）是属于Table Lock,它包含了两种类型：</p>
<ul>
<li>Intention shared(<em><strong>IS</strong></em>):<br>示例：Set an <em><strong>IS</strong></em> Locks :<code>SELECT ... LOCK IN SHARE MODE</code><br><strong>说明</strong>：事务在给一个数据行加共享锁之前必须先取得该表的IS锁</li>
<li>Intention exclusive(<em><strong>IX</strong></em>):<br>示例：Set an <em><strong>IX</strong></em> Locks ：<code>SELECT ... FOR UPDATE</code><br><strong>说明</strong>：事务在个一个数据行加排它锁之前必须先取得该表的IX锁<blockquote>
<p><strong>注意</strong>：<br>　　1.在一个事务获得表中一条记录的 <em><strong>S</strong></em> Lock 前必须首先获得一个<em><strong>IS</strong></em> Lock 或者更强的锁在表上；<br>　　2.在一个事务获得表中一条记录的 <em><strong>X</strong></em> LocK 前必须先获得一个<em><strong>IX</strong></em> Lock.</p>
</blockquote>
</li>
<li><p>InnoDB的锁类型相容性矩阵：<br> <img src="/uploads/blog/MySQL/InnoDB Lock Compatible.png" alt=""></p>
<blockquote>
<p>如果一个事务请求的锁模式和当前的锁兼容，InnoDB就将请求的锁授予给后开启的事务，否则后开启的事务就必须等待当前的锁释放才能获得锁。如果一个锁和一个存在的锁冲突了的并且一段时间都没有获取到锁的话，就会出现死锁（后面再介绍）的现象。</p>
</blockquote>
</li>
<li><p>死锁定义</p>
<blockquote>
<p>A situation where different transactions are unable to proceed, because each holds a lock that the other needs. Because both transactions are waiting for a resource to become available, neither will ever release the locks it holds.</p>
</blockquote>
</li>
<li><p>死锁的例子<br>&gt;<br>首先，客户A开启一个事务，然后对某一行执 IS 锁<br><code>START TRANSACTION;</code><br><code>select * from child where id=1 LOCK IN SHARE MODE;</code><br><small><strong>说明</strong>：取得<strong>IS</strong>锁</small><br>然后，客户B又过来开启了另外一个事务：<br><code>START TRANSACTION;</code><br>执行一个删除操作：<br><code>DELETE FROM child where id = 1;</code><br><small><strong>说明</strong>：此时由于需要<strong>X</strong> 锁，这个锁不兼容客户A持有的<strong>S</strong>锁，所以没有客户B没有获得<strong>X</strong>锁，一直等待A释放<strong>S</strong>锁，所以客户B就被一直阻塞</small><br>最后，客户A也执行删除操作：<br><code>DELETE FROM child where id = 1;</code><br>说明：此时客户A也需要X锁，而客户B也在等待X锁，此时InnoDB对客户A产生了一个死锁错误，并且终止其等待X锁操作。<br>结果客户端B抛出死锁：<br><code>ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction</code></p>
</li>
</ul>
<ul>
<li>表级锁和行级锁的比较<br>&gt;<br>1.表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。<br>2.行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ MySql InnoDB Lock(一)-- Shared and Exclusive Locks]]></title>
      <url>http://www.jiang-yu.cn/2016/06/04/MySQL/InnoDB/InnoDB_S_And_X_Lock/</url>
      <content type="html"><![CDATA[<p>　　InnoDB 引擎实现了两种标准的行级锁：共享锁(S锁)和排它锁(X锁),本篇就来介绍一下该类型的锁的相关信息。<br><a id="more"></a></p>
<p>###S Lock（共享锁） INTRODUCTION：</p>
<blockquote>
<p>A shared (S) lock permits the transaction that holds the lock to read a row.<br>基本的意思为：在开启事务读一行数据的时候允许拥有一个共享锁，所以共享锁也称为读锁（read lock）</p>
</blockquote>
<p>　　如果事务T1拥有S锁，其他独立的事务也可以同时获取S锁，也就是说S锁是共享的。</p>
<p>###X Lock（排它锁） INTRODUCTION：</p>
<blockquote>
<p>An exclusive (X) lock permits the transaction that holds the lock to update or delete a row.<br>基本的意思是：在开启事务更新或者删除一行数据的时候允许有一个排它锁，所以排它锁也称为写锁（write lock）</p>
</blockquote>
<p>　　如果事务T1拥有X锁，其他独立的事务T2如果需要获得X锁必须要等待事务T1释放锁之后才能够得到。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown语法整理]]></title>
      <url>http://www.jiang-yu.cn/2016/06/03/Markdown/MarkDown%E8%AF%AD%E6%B3%95%E8%AE%A4%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>　　作为一名合格的程序猿，写文档是必需的，选择一款合适的编辑器就如同一个好的助手，Markdown就是一个好的选择，语法简洁，逼格高~~，如果你经常玩GitHub，就会知道我们用于编写说明文档，并且以“README.MD”的文件名保存在软件的目录下面就是基于Markdwon语法的。下面就来学习一下Markdown的基本语法吧！<br><a id="more"></a></p>
<h1 id="Markdown-语法"><a href="#Markdown-语法" class="headerlink" title="Markdown 语法"></a>Markdown 语法</h1><p>[TOC]<br>　　下面将从三个层次来展开讲解，首先是常用层次，就是我们平时用的最多的并且要牢牢记住的（就如写代码的第一步：基本语法的熟悉），然后是对于一些不常用的，但是有可能会用到的标记我们必须要有印象，用到的时候能够快速的回想起来，最后就是了解层次了，这些标记基本上很少用到，只是在特定的情况下可能用到，并且能够通过查阅资料使用即可。</p>
<h3 id="一、常用层次"><a href="#一、常用层次" class="headerlink" title="一、常用层次"></a>一、常用层次</h3><ul>
<li><strong>标题</strong></li>
</ul>
<blockquote>
<pre><code># 一级标题
## 二级标题
### 三级标题
#### 四级标题
--- 次阶标题
=== 高阶标题
</code></pre><p><strong>注意</strong>：</p>
<ul>
<li><h1 id="和标题之间最好加一个空格"><a href="#和标题之间最好加一个空格" class="headerlink" title="和标题之间最好加一个空格"></a>和标题之间最好加一个空格</h1></li>
<li><h1 id="代表标题的层级，最多为六级"><a href="#代表标题的层级，最多为六级" class="headerlink" title="代表标题的层级，最多为六级"></a>代表标题的层级，最多为六级</h1></li>
</ul>
</blockquote>
<ul>
<li><strong>目录</strong><blockquote>
<p>　　在文档的标题都是按照Markdown语法来编写的，一般在一级标题下面使用 [TOC] 后会自动的生成层级目录。</p>
</blockquote>
</li>
<li><p>标签</p>
<blockquote>
<p> 标签使用如下标记：<br> 　　标签:Markdown<br> 　　Tags:Markdown</p>
</blockquote>
</li>
<li><p><strong>引用</strong></p>
<blockquote>
<p>使用 &gt; 表示引用， &gt;&gt; 表示引用里面再套一层引用，依次类推</p>
</blockquote>
</li>
<li><p><strong>图片</strong></p>
<blockquote>
<p>语法：![Beautiful](<a href="http://img1.imgtn.bdimg.com/it/u=2948830857,1878924554&amp;fm=21&amp;gp=0.jpg" target="_blank" rel="external">http://img1.imgtn.bdimg.com/it/u=2948830857,1878924554&amp;fm=21&amp;gp=0.jpg</a> “测试图片”)<br>实例：<img src="http://img1.imgtn.bdimg.com/it/u=2948830857,1878924554&amp;fm=21&amp;gp=0.jpg" alt="Beautiful" title="测试图片"></p>
</blockquote>
</li>
<li><p><strong>代码</strong></p>
<blockquote>
<p>使用<code>code content</code>,英文状态下的键盘的左上角~键即可输出”`”,连接三个中间输入代码，最后还是三个结束,如果是显示的是行内代码就用”``”</p>
</blockquote>
</li>
<li><p><strong>链接</strong></p>
<blockquote>
<p>语法：这就是我们常用的地址：[Baidu](www.baidu.com”百度一下，你就知道” )<br>实例：这就是我们常用的地址：<a href="www.baidu.com&quot;百度一下，你就知道&quot;">Baidu</a></p>
</blockquote>
</li>
<li><p><strong>列表</strong></p>
<blockquote>
<p>语法：使用 1. 2. 3. 表示有序列表，使用 * 或 - 或 + 表示无序列表<br>实例：<br>1.第一<br>2.第二</p>
</blockquote>
</li>
<li><p><strong>字体</strong></p>
<blockquote>
<p>语法：使用 <strong> 或者 _ 表示粗体；\</strong>字体<strong>  _字体_<br>实例：</strong>字体**  <em>字体</em></p>
</blockquote>
</li>
<li><p><strong>转义</strong></p>
<blockquote>
<p>转义使用反斜杠 \</p>
</blockquote>
</li>
<li><p><strong>空格</strong></p>
<blockquote>
<p>在输入法切换到全角模式，输入空格即可</p>
</blockquote>
</li>
</ul>
<h3 id="二、印象层次"><a href="#二、印象层次" class="headerlink" title="二、印象层次"></a>二、印象层次</h3><ul>
<li><p><strong>删除线</strong></p>
<blockquote>
<p>语法： ~~ 表示删除线; \<del>中划线</del><br>实例：<del>中划线</del></p>
</blockquote>
</li>
<li><p><strong>标注</strong>（略）</p>
</li>
</ul>
<h3 id="三、了解层次"><a href="#三、了解层次" class="headerlink" title="三、了解层次"></a>三、了解层次</h3><ul>
<li><strong>流程图</strong>（略）</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下部署多个Tomcat的配置]]></title>
      <url>http://www.jiang-yu.cn/2016/06/02/Linux/Linux%E4%B8%8B%E9%83%A8%E7%BD%B2%E5%A4%9A%E4%B8%AATomcat%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>部署java项目时，经常需要配置多个Tomcat来运行多个应用，本文就简单的介绍一下如何来配置<br><a id="more"></a></p>
<h3 id="方式一：全局配置"><a href="#方式一：全局配置" class="headerlink" title="方式一：全局配置"></a>方式一：全局配置</h3><p>　　如果是全局环境的安装就直接修改/etc目录下的profile文件，添加一组java环境变量，和两组CATALINA环境变量；修改后的profile文件示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib:$JAVA_HOME/bin</span><br><span class="line">export JAVA_HOME CLASSPATH</span><br><span class="line">CATALINA_BASE=/u01/app/apache-tomcat-6.0.18</span><br><span class="line">CATALINA_HOME=/u01/app/apache-tomcat-6.0.18</span><br><span class="line">export CATALINA_BASE CATALINA_HOME</span><br><span class="line"></span><br><span class="line">CATALINA_2_BASE=/u01/app/apache-tomcat-shanghai</span><br><span class="line">CATALINA_2_HOME=/u01/app/apache-tomcat-shanghai</span><br><span class="line">export CATALINA_2_BASE CATALINA_2_HOME</span><br><span class="line">TOMCAT_HOME=/u01/app/apache-tomcat-6.0.18</span><br><span class="line">export TOMCAT_HOME</span><br><span class="line">TOMCAT_2_HOME=/u01/app/apache-tomcat-shanghai</span><br><span class="line">export TOMCAT_2_HOME</span><br></pre></td></tr></table></figure></p>
<h3 id="方式二：临时配置方式"><a href="#方式二：临时配置方式" class="headerlink" title="方式二：临时配置方式"></a>方式二：临时配置方式</h3><p>　　第一个安装在/u01/app/apache-tomcat-6.0.18处的tomcat，保持解压后的原状不用修改。修改第二个安装在/u01/app/apache-tomcat-shanghai处的tomcat。需要修改两个地方：</p>
<ul>
<li><p>修改server.xml配置和第一个不同的启动、关闭监听端口。修改后示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Server port=&quot;8050&quot; shutdown=&quot;SHUTDOWN&quot;&gt;　 端口：8049-&gt;8050</span><br><span class="line">&lt;!-- Define a non-SSL HTTP/1.1 Connector on port 8080 --&gt;</span><br><span class="line">&lt;Connector port=&quot;9080&quot; maxHttpHeaderSize=&quot;8192&quot;　</span><br><span class="line">     maxThreads=&quot;150&quot; minSpareThreads=&quot;25&quot; maxSpareThreads=&quot;75&quot;</span><br><span class="line">     enableLookups=&quot;false&quot; redirectPort=&quot;8443&quot; acceptCount=&quot;100&quot;</span><br><span class="line">     connectionTimeout=&quot;20000&quot; disableUploadTimeout=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改bin下的startup.sh和shutdown.sh。修改后的示例如下：（同样的修改）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/jdk</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib</span><br><span class="line">export CATALINA_HOME=$CATALINA_2_HOME 利用profile中第二组设置</span><br><span class="line">export CATALINA_BASE=$CATALINA_2_BASE 利用profile中第二组设置</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="步骤三、重新加载一下资源文件"><a href="#步骤三、重新加载一下资源文件" class="headerlink" title="步骤三、重新加载一下资源文件"></a>步骤三、重新加载一下资源文件</h3><p>　　修改完毕后，source /etc/profile。<br>　　可能是因为修改了profile文件的缘故</p>
<p>　　注意：如果是每个用户的配置，就需要到用户的目录下：/home/用户/下 ，执行ls -a 找出.bash_profile 修改以上东西即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[初识AngularJS]]></title>
      <url>http://www.jiang-yu.cn/2016/06/02/AngularJS/%E5%88%9D%E8%AF%86AngularJS/</url>
      <content type="html"><![CDATA[<p>　　MVC只是手段，终极目标是模块化和复用<br><a id="more"></a></p>
<h3 id="一、AngularJS和传统JavaScript的区别："><a href="#一、AngularJS和传统JavaScript的区别：" class="headerlink" title="一、AngularJS和传统JavaScript的区别："></a>一、AngularJS和传统JavaScript的区别：</h3><ol>
<li>传统的JavaScript要求开发者对整个DOM结构都有所了解，并强迫我们在JavaScript代码中加入复杂的控制逻辑，用以操作外部DOM，而AngularJS则通过原生的Model-View-Controller（MVC，模型-视图-控制器）功能增强了HTML;</li>
<li>使用AngularJS，开发者可以将页面的一部分封装为一个应用，并不强迫整个页面都使用AngularJS进行开发;</li>
<li>AngularJS团队非常重视框架文件压缩后的大小，这样使用它就不会付出太多的额外代价;<h3 id="二、使用AngularJS的第一个Web应用："><a href="#二、使用AngularJS的第一个Web应用：" class="headerlink" title="二、使用AngularJS的第一个Web应用："></a>二、使用AngularJS的第一个Web应用：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">        &lt;html ng-app&gt;</span><br><span class="line">        &lt;head&gt;</span><br><span class="line">            &lt;title&gt;Simple app &lt;/title&gt;</span><br><span class="line">            &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.13/angular.js&quot;  &lt;/script&gt; </span><br><span class="line">        &lt;/head&gt;</span><br><span class="line">        &lt;body&gt;</span><br><span class="line">             &lt;input ng-model=&quot;name&quot; type=&quot;text&quot; placeholder=&quot;Your name&quot;&gt;</span><br><span class="line">            &lt;h1&gt;Hello &#123;&#123; name &#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;/body&gt;</span><br><span class="line">        &lt;/html&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="三、AngularJS中的数据绑定："><a href="#三、AngularJS中的数据绑定：" class="headerlink" title="三、AngularJS中的数据绑定："></a>三、AngularJS中的数据绑定：</h3><p>　　AngularJS创建实时模板来代替视图，而不是将数据合并进模板之后更新DOM。任何一个独立的视图组件中的值都是动态替换的。这个功能可以说是AngularJS中最重要的功能之一，这也是可以只用10行代码并且没有任何JavaScript的情况下写出一个Hello World.<br>　　a.　DOM元素上要明确设置ng-app属性<br>ng-app属性声明所有被其包含的内容都属于这个AngularJS应用，也就是说可以在Web应用中嵌套AngularJS应用的原因。<br>注意：只用被具有ng-app属性的DOM元素包含的元素才会受到AngularJS的影响。<br>　　b.　ng-app相当于main方法  </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring中Filter和Inteceptor的区别-转载]]></title>
      <url>http://www.jiang-yu.cn/2016/04/17/SpringMVC/Spring%E4%B8%ADFilter%E5%92%8CInteceptor%E7%9A%84%E5%8C%BA%E5%88%AB-%E8%BD%AC%E8%BD%BD/</url>
      <content type="html"><![CDATA[<pre><code>原文出自：http://www.cnblogs.com/davidwang456/p/4108355.html
</code></pre><a id="more"></a>
<p>spring mvc DispatcherServlet详解之interceptor和filter的区别</p>
<p>首先我们看一下spring mvc Interceptor的功能及实现：</p>
<p><a href="http://wenku.baidu.com/link?url=Mw3GaUhCRMhUFjU8iIDhObQpDcbmmRy_IPeumazg0ppnbmwqFUtLp9kSpuPPpeysf6EnHBLYFeWrbjqMq8BlWKQz_7MSDhGQTVl32fpxCMm" title="Spring MVC Interceptor Introduce" target="_blank" rel="external">http://wenku.baidu.com/link?url=Mw3GaUhCRMhUFjU8iIDhObQpDcbmmRy_IPeumazg0ppnbmwqFUtLp9kSpuPPpeysf6EnHBLYFeWrbjqMq8BlWKQz_7MSDhGQTVl32fpxCMm</a></p>
<p>SpringMVC 中的Interceptor 拦截器也是相当重要和相当有用的，它的主要作用是拦截用户的请求并进行相应的处理，其他的作用比如通过它来进行权限验证，或者是来判断用户是否登陆，日志记录，或者限制时间点访问。</p>
<p>SpringMVC 中的Interceptor 拦截请求是通过HandlerInterceptor 来实现的。在SpringMVC 中定义一个Interceptor 非常简单，主要有两种方式，第一种方式是要定义的Interceptor类要实现了Spring 的HandlerInterceptor 接口，或者是这个类继承实现了HandlerInterceptor 接口的类，比如Spring 已经提供的实现了HandlerInterceptor 接口的抽象类HandlerInterceptorAdapter ；第二种方式是实现Spring的WebRequestInterceptor接口，或者是继承实现了WebRequestInterceptor的类。</p>
<p>HandlerInterceptor 接口中定义了三个方法，我们就是通过这三个方法来对用户的请求进行拦截处理的。</p>
<p>   （1 ）preHandle (HttpServletRequest request, HttpServletResponse response, Object handle) 方法。该方法将在请求处理之前进行调用。SpringMVC 中的Interceptor 是链式的调用的，在一个应用中或者说是在一个请求中可以同时存在多个Interceptor 。每个Interceptor 的调用会依据它的声明顺序依次执行，而且最先执行的都是Interceptor 中的preHandle 方法，所以可以在这个方法中进行一些前置初始化操作或者是对当前请求的一个预处理，也可以在这个方法中进行一些判断来决定请求是否要继续进行下去。该方法的返回值是布尔值Boolean 类型的，当它返回为false 时，表示请求结束，后续的Interceptor 和Controller 都不会再执行；当返回值为true 时就会继续调用下一个Interceptor 的preHandle 方法，如果已经是最后一个Interceptor 的时候就会是调用当前请求的Controller 方法。</p>
<p>   （2 ）postHandle (HttpServletRequest request, HttpServletResponse response, Object handle, ModelAndView modelAndView) 方法，由preHandle 方法的解释我们知道这个方法包括后面要说到的afterCompletion 方法都只能是在当前所属的Interceptor 的preHandle 方法的返回值为true 时才能被调用。postHandle 方法，顾名思义就是在当前请求进行处理之后，也就是Controller 方法调用之后执行，但是它会在DispatcherServlet 进行视图返回渲染之前被调用，所以我们可以在这个方法中对Controller 处理之后的ModelAndView 对象进行操作。postHandle 方法被调用的方向跟preHandle 是相反的，也就是说先声明的Interceptor 的postHandle 方法反而会后执行，这和Struts2 里面的Interceptor 的执行过程有点类型。Struts2 里面的Interceptor 的执行过程也是链式的，只是在Struts2 里面需要手动调用ActionInvocation 的invoke 方法来触发对下一个Interceptor 或者是Action 的调用，然后每一个Interceptor 中在invoke 方法调用之前的内容都是按照声明顺序执行的，而invoke 方法之后的内容就是反向的。</p>
<p>   （3 ）afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handle, Exception ex) 方法，该方法也是需要当前对应的Interceptor 的preHandle 方法的返回值为true 时才会执行。顾名思义，该方法将在整个请求结束之后，也就是在DispatcherServlet 渲染了对应的视图之后执行。这个方法的主要作用是用于进行资源清理工作的。 我们的系统日志的拦截在这个方法中，可以记录日志的相关的参数，检测方法的执行。</p>
<p>在这里，我们就有一个疑问了：拦截器和过滤器到底有什么不同呢？</p>
<p>首先，我们看一下官方是怎么解释的：</p>
<pre><code>public interface HandlerInterceptor
Workflow interface that allows for customized handler execution chains.
Applications can register any number of existing or custom interceptors for 
certain groups of handlers, to add common preprocessing behavior without 
needing to modify each handler implementation.
A HandlerInterceptor gets called before the appropriate HandlerAdapter triggers 
the execution of the handler itself. This mechanism can be used for a large field 
of preprocessing aspects, e.g. for authorization checks, or common handler behavior
like locale or theme changes. Its main purpose is to allow for factoring out repetitive 
handler code.

In an async processing scenario, the handler may be executed in a separate thread while 
the main thread exits without rendering or invoking the postHandle and afterCompletion 
callbacks. When concurrent handler execution completes, the request is dispatched 
back in order to proceed with rendering the model and all methods of this contract 
are invoked again. For further options and details 
see org.springframework.web.servlet.AsyncHandlerInterceptor

Typically an interceptor chain is defined per HandlerMapping bean, sharing its granularity. 
To be able to apply a certain interceptor chain to a group of handlers, one needs to map 
the desired handlers via one HandlerMapping bean. The interceptors themselves are defined 
as beans in the application context, referenced by the mapping bean definition 
via its &quot;interceptors&quot; property (in XML: a &lt;list&gt; of &lt;ref&gt;).

HandlerInterceptor is basically similar to a Servlet 2.3 Filter, but in contrast to the 
latter it just allows custom pre-processing with the option of prohibiting the execution 
of the handler itself, and custom post-processing. Filters are more powerful, for example 
they allow for exchanging the request and response objects that are handed down the chain. 
Note that a filter gets configured in web.xml, a HandlerInterceptor in the application context.

As a basic guideline, fine-grained handler-related preprocessing tasks are candidates for 
HandlerInterceptor implementations, especially factored-out common handler code and authorization 
checks. On the other hand, a Filter is well-suited for request content and view content handling, 
like multipart forms and GZIP compression. This typically shows when one needs to map the filter 
to certain content types (e.g. images), or to all requests.


public interface Filter
A filter is an object that performs filtering tasks on either the request to a resource (a servlet or static content),
 or on the response from a resource, or both. 

Filters perform filtering in the doFilter method. Every Filter has access to a FilterConfig object from which it can 
obtain its initialization parameters, a reference to the ServletContext which it can use, for example, to load resources
needed for filtering tasks.

Filters are configured in the deployment descriptor of a web application

Examples that have been identified for this design are
1) Authentication Filters 
2) Logging and Auditing Filters 
3) Image conversion Filters 
4) Data compression Filters 
5) Encryption Filters 
6) Tokenizing Filters 
7) Filters that trigger resource access events 
8) XSL/T filters 
9) Mime-type chain Filter 
</code></pre><p>interceptor 和filter的概念相似，但主要不同点有：</p>
<p>web应用的过滤请求，仅使用web应用；</p>
<p>interceptor应用于特定组别的handler，可以web应用也可以企业应用；</p>
<p>从google找到的资料：<a href="http://www.linkedin.com/groups/what-is-difference-between-interceptor-3983267.S.5844715100472107010" target="_blank" rel="external">http://www.linkedin.com/groups/what-is-difference-between-interceptor-3983267.S.5844715100472107010</a></p>
<pre><code>Filter is used only in web applications whereas interceptor can be used with web as well as enterprise applications. 
Life cycle methods of both, also differs. The Interceptor stack fires on requests in a configured package while 
filters only apply to their mapped URL&apos;s. 

Example: 

A Servlet Filter is used in the web layer only, you can&apos;t use it outside of a 
web context. Interceptors can be used anywhere. 

The interceptor stack fires on every request. 
Filters only apply to the urls for which they are defined. 

Filters can be used when you want to modify any request or response parameters like headers. For example you would 
like to add a response header &quot;Powered By Surya&quot; to each generated response. Instead of adding this header in each 
resource method you would use a response filter to add this header. 

There are filters on the server side and the client side. 

In Summary: 

Filters: 

(1)Based on Servlet Specification 
(2)Executes on the pattern matches on the request. 
(3) Not configurable method calls. 


Interceptors: 
(1)Based on Struts2. 
(2)Executes for all the request qualifies for a front controller( A Servlet filter ).And can be configured to 
execute additional interceptor for a particular action execution. 
(3)Methods in the Interceptors can be configured whether to execute or not by means of excludemethods or includeMethods
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring拦截器--HandlerInterceptorAdapter]]></title>
      <url>http://www.jiang-yu.cn/2016/04/17/SpringMVC/Spring%E6%8B%A6%E6%88%AA%E5%99%A8-HandlerInterceptorAdapter/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;很多时候，在使用Spring要对某些请求进行过滤时候，我们首先想到的可能是Filte–过滤器，确实过滤器能够对请求进行过滤，实现对Bean的preHandle和postHandle。但是今天我们介绍另外的一种方式–拦截器（Interceptor）.在Spring MVC中拦截器不仅能够实现Filter的所有功能，而且对于需要进行拦截的请求可以更加自由的实现自定义的注入性。</p>
<a id="more"></a>
<h1 id="一、认识HandlerInterceptorAdapter"><a href="#一、认识HandlerInterceptorAdapter" class="headerlink" title="一、认识HandlerInterceptorAdapter"></a>一、认识HandlerInterceptorAdapter</h1><p>&emsp;&emsp;在spring中实现拦截器，需要继承HandlerInterceptorAdapter类，从类的名称可以看出，这是一个适配器类并且是抽象类，其提供了四个方法：【下面是Spring中的源码】<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">   /*</span><br><span class="line">	 * Copyright 2002-2012 the original author or authors.</span><br><span class="line"> *</span><br><span class="line"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line"> * you may not use this file except in compliance with the License.</span><br><span class="line"> * You may obtain a copy of the License at</span><br><span class="line"> *</span><br><span class="line"> *      http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"> *</span><br><span class="line"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="line"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"> * See the License for the specific language governing permissions and</span><br><span class="line"> * limitations under the License.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">package org.springframework.web.servlet.handler;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.servlet.AsyncHandlerInterceptor;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Abstract adapter class for the HandlerInterceptor interface,</span><br><span class="line"> * for simplified implementation of pre-only/post-only interceptors.</span><br><span class="line"> *</span><br><span class="line"> * @author Juergen Hoeller</span><br><span class="line"> * @since 05.12.2003</span><br><span class="line"> */</span><br><span class="line">public abstract class HandlerInterceptorAdapter implements AsyncHandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * This implementation always returns &#123;@code true&#125;.</span><br><span class="line">	 */</span><br><span class="line">	@Override</span><br><span class="line">	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br><span class="line">		throws Exception &#123;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * This implementation is empty.</span><br><span class="line">	 */</span><br><span class="line">	@Override</span><br><span class="line">	public void postHandle(</span><br><span class="line">			HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * This implementation is empty.</span><br><span class="line">	 */</span><br><span class="line">	@Override</span><br><span class="line">	public void afterCompletion(</span><br><span class="line">			HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * This implementation is empty.</span><br><span class="line">	 */</span><br><span class="line">	@Override</span><br><span class="line">	public void afterConcurrentHandlingStarted(</span><br><span class="line">			HttpServletRequest request, HttpServletResponse response, Object handler)</span><br><span class="line">			throws Exception &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;可以看出，这个抽象类提供的四个方法：</p>
<ol>
<li>preHandle  预处理–一般实现编码的控制和安全性控制</li>
<li>postHandle 后处理–可以修改Spring中的ModelAndView,使得跳转到不同的View</li>
<li>afterCompletion 返回处理–通过判断ex的值可以进行异常日志记录和处理</li>
<li>afterConcurrentHandlingStarted</li>
</ol>
<h1 id="二、使用Spring-MVC-的拦截器"><a href="#二、使用Spring-MVC-的拦截器" class="headerlink" title="二、使用Spring MVC 的拦截器"></a>二、使用Spring MVC 的拦截器</h1><p>例如：我们可以使用拦截器实现特定情况下可以访问某些接口，最常用的情况是，某些系统提供给外部调用的接口需要有时间的限制。<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">package com.jifenn.ja.web.common.interceptor;</span><br><span class="line"></span><br><span class="line">import java.util.Calendar;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;p&gt;功能描述&lt;/br&gt; 控制给外部系统调用某些接口的时间限制 : 接口开放时间：8：00-21：00 &lt;/p&gt;</span><br><span class="line"> * </span><br><span class="line"> * @className Intf4OutCallTimeInterceptor</span><br><span class="line"> * @author jiangyu</span><br><span class="line"> * @date 2016年4月17日 下午12:18:25</span><br><span class="line"> * @version v1.0</span><br><span class="line"> */</span><br><span class="line">public class Intf4OutCallTimeInterceptor extends HandlerInterceptorAdapter</span><br><span class="line">&#123;</span><br><span class="line">    /** 允许时间段 **/</span><br><span class="line">    private int allowTimeZone;</span><br><span class="line"></span><br><span class="line">    /** 禁止时间段 **/</span><br><span class="line">    private int forbidTimeZone;</span><br><span class="line"></span><br><span class="line">    /** 需要拦截的路径 **/</span><br><span class="line">    private String mappingRegexURL;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)</span><br><span class="line">        throws Exception</span><br><span class="line">    &#123;</span><br><span class="line">        String url = request.getRequestURL().toString();</span><br><span class="line">        if (mappingRegexURL == null || url.matches(mappingRegexURL))</span><br><span class="line">        &#123;</span><br><span class="line">            Calendar calendar = Calendar.getInstance();</span><br><span class="line">            calendar.setTime(new Date());</span><br><span class="line">            int hour = calendar.get(Calendar.HOUR_OF_DAY);</span><br><span class="line">            if (hour &lt; allowTimeZone || hour &gt; forbidTimeZone)</span><br><span class="line">            &#123;</span><br><span class="line">                request.setAttribute(&quot;msg&quot;, &quot;接口开放时间：8：00-21：00&quot;);</span><br><span class="line">                request.getRequestDispatcher(&quot;/err.jsp&quot;).forward(request, response);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAllowTimeZone(int allowTimeZone)</span><br><span class="line">    &#123;</span><br><span class="line">        this.allowTimeZone = allowTimeZone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setForbidTimeZone(int forbidTimeZone)</span><br><span class="line">    &#123;</span><br><span class="line">        this.forbidTimeZone = forbidTimeZone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMappingRegexURL(String mappingRegexURL)</span><br><span class="line">    &#123;</span><br><span class="line">        this.mappingRegexURL = mappingRegexURL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>spring的xml配置文件配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;intf4OutAccessInterceptor&quot; class=&quot;com.jifenn.ja.web.common.interceptor.Intf4OutCallTimeInterceptor&quot;&gt;</span><br><span class="line">	&lt;property name=&quot;allowTimeZone&quot; value=&quot;8&quot; /&gt;</span><br><span class="line">	&lt;property name=&quot;forbidTimeZone&quot; value=&quot;21&quot; /&gt;</span><br><span class="line">	&lt;property name=&quot;mappingRegexURL&quot; value=&quot;.*/intf4out\.do\?name=*&quot; /&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean</span><br><span class="line">	class=&quot;org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping&quot;&gt;</span><br><span class="line">	&lt;property name=&quot;interceptors&quot;&gt;</span><br><span class="line">		&lt;list&gt;</span><br><span class="line">			&lt;ref bean=&quot;intf4OutAccessInterceptor&quot; /&gt;</span><br><span class="line">		&lt;/list&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git push error-- [rejected--non-fast-forward] 解决]]></title>
      <url>http://www.jiang-yu.cn/2016/04/03/GitHub/git-push-rejected-non-fast-forward-Fixed/</url>
      <content type="html"><![CDATA[<p>在使用Eclipse插件egit将本地代码push到github时提示错误：<br>reject non - fast -forward<br><a id="more"></a><br>刚开始工作时，许多公司都还是喜欢用SVN来管理代码，但是作为一名“程序猿”，Git已经成为一项必备的技能，之前一直都对git有些冷落，最近由于有点想法–自己搞了点业余的项目练手，自己搭建SVN需要服务器（服务器~money,haha），所以就将代码搬到Git上。</p>
<p>废话了这么多，回到正轨吧！首先，遇到上面的问题也是比较常见的，这里给出一种解决方法步骤（附图如下）：</p>
<pre><code>setp 1 :fetch 远程github中的工程

setp 2 :merge

setp 3 :push
</code></pre><p>如下图：</p>
<p><img src="http://i.imgur.com/4BhMdAh.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[classpath,你真的理解了么？]]></title>
      <url>http://www.jiang-yu.cn/2016/04/01/SpringMVC/classpath-%E4%BD%A0%E7%9C%9F%E7%9A%84%E7%90%86%E8%A7%A3%E4%BA%86%E4%B9%88%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>CLASSPATH环境变量：作用是指定类搜索路径，要使用已经编写好的类，前提当然是能够找到它们了，JVM就是通过CLASSPATH来寻找类的.class文件。<br><a id="more"></a></p>
<p>###CLASSPATH是什么？<br>在Java环境中，设置classpath的目的就是在于告诉Java执行环境（JVM）在哪个地方可以找到需要执行的Java程序所需要的类或者包。</p>
<p>配置classpath其实就类似于c/c++中的#include&lt;*.h&gt;,就是将相应的要加载类引入。</p>
<p>在Java Web项目中，classpath是指WEB-INF文件夹下的classes目录，将web应用发布到服务器时，会将src下所有的.java文件编译成字节码文件（*.class）和静态资源文件放入到WEB-INF目录下classes文件夹下。</p>
<p>###classpath和classpath*的区别<br>classpath: 只会搜索当前项目中的class路径查找所需要的文件</p>
<p>classpath*:不仅会搜索当前项目中的class路基查找所需要的文件，同时还会扫描所有的jar文件，加载所需要的文件。</p>
<p>说明白点就是：</p>
<ol>
<li>classpath:会从第一个classpath中加载所需要的文件，而classpath*：会从所有的classpath中加载符合条件的文件；</li>
<li>如果需要加载的资源不再当前的classLoader的路径中，用classpath：是获取不到该文件的（比如说是jar包中的配置文件），这种情况下就要使用classpath*:来加载相应的资源文件了；</li>
<li>用classpath*:需要遍历所有的classpath,所以加载速度是很慢的，如果是在性能要求很高的系统中，还是不太建议这样去设计代码结构。</li>
</ol>
<p>因为最近在搭建项目的时候，遇到了这个问题，情景是这样的：搭建的web工程分成了几个模块，根据maven来管理项目，模块的包都打成jar包，最终呈现出来的是通过一个maven web工程打出一个war包，war包中是由几个模块打成的jar包组成，在项目启动的时候发现找不到jar包中的配置文件，因为我的配置就是classpath,后面网上查了一下资料，发现可以使用classpath*来实现。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[WebSocket初识]]></title>
      <url>http://www.jiang-yu.cn/2016/03/31/Socket/WebScoket%E5%92%8CHttp%E6%AF%94%E8%BE%83/</url>
      <content type="html"><![CDATA[<p>  WebSocket protocol 是HTML5一种新的协议。它实现了浏览器与服务器全双工通信(full-duplex)。【摘自百度百科】<br><a id="more"></a><br>  WebSocket是为解决客户端与服务端实时通信而产生的技术。其本质是先通过HTTP/HTTPS协议进行握手后创建一个用于交换数据的TCP连接，此后服务端与客户端通过此TCP连接进行实时通信。</p>
<p>###一、WebSocket和Http协议的认识<br>首先Http协议是不支持长连接的，早期的HTTP1.0是没有所谓的keep-alive的，也就是只是一对一的通信，直到HTTP1.1才有keep-alive,就是把多个请求合并成一个，最终也只是几个请求对应几个响应，服务端不能主动的推送消息给客户端，而WebSocket其实是对HTTP协议的一种补充。</p>
<p>###二、WebSocket和Http协议的区别<br>A.相对于Http协议来说，WebSocket是一个<strong>持久化</strong>的协议，如果还是不是很清楚，可以看一下图片对比：<br><img src="/uploads/blog/Socket/http_protocal.png" alt=""></p>
<p>从上图可以看出来，HTTP的生命周期是通过Request决定的，在HTTP 1.0中，每次通信只是一个request对应一个response，为了弥补这个问题，在HTTP 1.1协议中，增加了一个头部keep-alive，这个是保证连接保持的功能，虽然keep-alive能够保证同时发送多个请求，但是这其中有一个不变的规则就是有多少个请求（request）就有多少个响应(response),并且response是不会主动的向客户端推送消息的，是一种被动的方式。另外HTTP协议是一种无状态的协议，就是一旦浏览器关闭所有的信息都没有了。</p>
<p>B.WebSocket协议是一种基于Html5的新的协议，但同时它也是基于Http协议的。</p>
<p> 在WebSocket出现之前，为了实现实时信息的传递都是通过HTTP长轮询（Long Poll）的方式，或者ajax轮询的方式，或者其他的特殊方式。这两种方式都是服务器端被动的等待客户端来询问是否有新的信息，如果有新的信息来就处理，但是也有一些区别：</p>
<p> Long Poll:客户端发起请求，如果服务端没有信息返回，客户端就一直等待服务端的响应，是一种阻塞式的请求方式。</p>
<p> Ajax Pool：每隔一段时间就去请求一些服务器端，看是否有新的消息要处理。</p>
<p> 从这两种方式来看，实现实时信息通信都非常耗资源。而WebSocket可以很好的利用有限的资源来实现上面的效果，先看下webSocket的请求模式：</p>
<p> <img src="/uploads/blog/Socket/http_and_websocket.png" alt=""></p>
<p> 从上面的webSocket协议传输数据方式来看，只要每次建立一个HTTP连接，就可以不断的进行信息传输，并且不会再次发送HTTP连接了，也就是实现了正真意义上的长连接。</p>
<p>###总结<br> websocket约定了一个通信的规范，通过一个握手的机制，客户端和服务器之间能建立一个类似tcp的连接，从而方便它们之间的通信。在websocket出现之前，web交互一般是基于http协议的短连接或者长连接。websocket是一种全新的协议，不属于http无状态协议，协议名为”ws”，这意味着一个websocket连接地址会是这样的写法：ws://**。websocket协议本质上是一个基于tcp的协议。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mvc annotation-driven配置错误]]></title>
      <url>http://www.jiang-yu.cn/2016/03/30/SpringMVC/mvc%20annotation-driven%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<p>代码盲目的复制不是一个好的习惯，今天这个问题就是因为盲目的复制以前的代码，希望以后注意一点。</p>
<a id="more"></a>
<p>   今天用Spring MVC 做业余项目的时候，发现要自己手动的注册一个转换器（String字符串的乱码问题），发现在自定义StringHttpMessageConverter的时候（如下配置）</p>
<p>   <img src="/uploads/blog/Spring/spring-httpmessageconverter self-setting.png" alt=""><br>   发现项目启动的时候报错：</p>
<pre><code>org.xml.sax.SAXParseException; lineNumber: 28; columnNumber: 26; cvc-complex-type.2.1: 元素 &apos;mvc:annotation-driven&apos; 必须不含字符或元素信息项 [子级], 因为该类型的内容类型为空。
</code></pre><p>   根据错误提示信息可以定位到就是上面的配置项出现了问题，但是这种方式网上都有许多人说是可行的，自己感觉特别的疑惑，最后问度娘找到了一丝线索–spring 配置的xsd版本太低了，这个是老版本中规定的规则。</p>
<p>   带着这么一个提示，我看了一下我自己spring使用的是4.1版本，但是spring的配置文件中使用的mvc命名空间中xsd的版本竟然是3.0版本.</p>
<p>   果然，将3.0替换成4.0后项目能够正常启动了，String乱码问题也得到了解决。（如下图所示修改）<br>   <img src="/uploads/blog/Spring/spring-xsd version low.png" alt=""></p>
<h3 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h3><p>   其实这也源于我们都喜欢拷代码，导致有些细节的问题没有注意到，这里也是给自己一个提醒吧！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat + Ngnix + Memcached 负载均衡 Session共享]]></title>
      <url>http://www.jiang-yu.cn/2016/03/06/Ngnix/Tomcat%20+%20Ngnix%20+%20Memcached%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%20Session%E5%85%B1%E4%BA%AB/</url>
      <content type="html"><![CDATA[<p>　　亲自动手实践和整理 Tomcat + Ngnix + Memcached 负载均衡 Session共享的实现<br><a id="more"></a></p>
<h2 id="目标：tomcat-ngnix-memcached-负载均衡-session共享"><a href="#目标：tomcat-ngnix-memcached-负载均衡-session共享" class="headerlink" title="目标：tomcat + ngnix + memcached 负载均衡 session共享"></a>目标：tomcat + ngnix + memcached 负载均衡 session共享</h2><h3 id="准备软件"><a href="#准备软件" class="headerlink" title="准备软件"></a>准备软件</h3><p><img src="/uploads/blog/Jdk/session_share_software_list.png" alt="准备安装软件"></p>
<h3 id="安装jdk环境"><a href="#安装jdk环境" class="headerlink" title="安装jdk环境"></a>安装jdk环境</h3><ul>
<li>解压jdk 压缩文件<br><code>tar -zxvf jdk-7u80-linux-x64.gz</code><br>建立Java目录 ，复制解压出来的jdk<br><img src="/uploads/blog/Jdk/config_java_temp_dir.png" alt="建立Java安装目录"></li>
<li><p>配置环境变量：</p>
<ul>
<li>编辑全局的配置文件<br><code>vim /etc/profile</code></li>
<li>在文件最后面加入如下配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#jdk configuration</span><br><span class="line">export JAVA_HOME=/home/jjyy/Public/java/jdk1.7/jdk1.7.0_80</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">export CLASSPATH=$CLASSPATH:.:$JER_HOME/lib:$JAVA_HOME/lib</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>　　　使得配置立即生效<br>　　　<code>source /etc/profile</code><br>　　　检验Jdk环境是否配置：<br>　　　<code>echo $JAVA_HOME</code><br>　　　<img src="/uploads/blog/Jdk/check_jdk_config_success.png" alt="JDK_CONFG_CHECK"></p>
</li>
</ul>
<h3 id="安装tomcat-服务器"><a href="#安装tomcat-服务器" class="headerlink" title="安装tomcat 服务器"></a>安装tomcat 服务器</h3><ul>
<li>上传tomcat的压缩文件<br> <img src="/uploads/blog/Tomcat/upload_tomcat_software.png" alt="Upload_tomcat"></li>
<li>解压文件：（这里配置三个tomcat ）<br><code>tar -zxvf apache-tomcat-7.0.68.tar.gz</code><br><img src="/uploads/blog/Tomcat/tar_three_tomcat.png" alt="Upload_tomcat"></li>
<li><p>配置约定<br>因为要配置多个tomcat ，所以这里有必要规定一下三个tomcat配置的端口号不能够重复：</p>
<blockquote>
<p>tomcat7_8081　8081　8185　18443　8109<br> tomcat7_8082　8082　8285　28443　8209<br> tomcat7_8083　8083　8385　38443　8309</p>
</blockquote>
<p> 配置完成之后可以试一下<br> 如果遇到访问不到的问题，<br> 一、可能是tomcat配置的端口号有冲突<br> 二、linux的防火墙限制了（暂时可以将防火墙关掉）</p>
<p> 至此，tomcat的基本配置是完成了</p>
</li>
</ul>
<h3 id="安装ngnix"><a href="#安装ngnix" class="headerlink" title="安装ngnix"></a>安装ngnix</h3><ul>
<li><p>安装ngnix要准备一些依赖包和软件的安装<br><strong>A</strong>.<code>**Install gcc gcc-c++**</code><br><code>sudo yum install gcc
sudo yum install gcc-c++</code><br>由于本机（centos 6.5已经安装好了，可以演示一下，会提示是最新的版本，不需要安装）安装完成之后，进入安装openssl.<br><strong>B</strong>.<code>**Install openssl**</code><br>首先建立一个third文件夹，用来放置第三方依赖的应用<br>然后解压openssl-1.0.1s.tar.gz<br><code>tar -zxvf openssl-1.0.1s.tar.gz
cd openssl-1.0.1s
sudo ./config --prefix=/usr/local/openssl-1.0.1s
sudo make 
sudo make install</code><br><strong>C</strong>.<code>**Install pcre-8.37**</code><br>解压pcre-8.37.tar.gz<br><code>tar -zxvf pcre-8.37.tar.gz
cd pcre-8.37
sudo ./configure --prefix=/usr/local/pcre-8.37
sudo make
sudo make install</code><br>中途问题：<br><img src="/uploads/blog/Tomcat/error.png" alt="Upload_tomcat"><br><strong>解决方式</strong>：卸载旧版本升级新版本<br>查询当前版本：<br><code>rpm -qf /usr/bin/autoconf</code><br>卸载当前版本：<br><code>rpm -e --nodeps autoconf-2.63</code><br>升级最新版本：<br><code>tar -zxvf autoconf-2.68.tar.gz
sudo ./configure --prefix=/usr/
sudo make 
sudo make install</code><br><strong>D</strong>:<code>**Install zlib-1.2.8**</code><br>解压zlib-1.2.8.tar.gz<br><code>tar -zxvf zlib-1.2.8.tar.gz
sudo ./configure --prefix = /usr/local/zlib-1.2.8
cd zlib-1.2.8
sudo make 
sudo  make install</code><br>至此，安装ngnix需要依赖的包都安装好了，下面开始安装ngnix<br><strong>E</strong>.<code>**ngnix安装**</code><br>解压nginx-1.8.1.tar.gz<br><code>tar -zxvf nginx-1.8.1.tar.gz
cd nginx-1.8.1
sudo ./configure
--prefix=/usr/local/nginx-1.8.1.tar.gz \
--with-openssl=/home/jjyy/Public/third/openssl-1.0.1s \
--with-pcre=/home/jjyy/Public/third/pcre-8.37 \
--with-zlib=/home/jjyy/Public/third/zllib-1.2.8 \
--with-http_ssl_module
sudo make
sudo make install</code><br><img src="/uploads/blog/Ngnix/Ngnix_install_code.png" alt="Ngnix_install_code"><br>等待nginx安装完成之后，我们就可以开始ngnix的配置了：<br>首先要明白的是，我们使用的是三个tomcat来做负载均衡处理，所以我们要配置三个tomcat的路径映射：</p>
<pre><code>&gt;    server 127.0.0.1:8081 weight=5;
    server 127.0.0.1:8082 weight=5;
    server 127.0.0.1:8083 weight=5;
</code></pre><p>nginx监听的是80端口号,<br>下面就开始一步一步的配置nginx.conf配置文件：<br><img src="/uploads/blog/Ngnix/Ngnix_config.png" alt="Upload_tomcat"><br>这里是详细的配置：<br><code>[root@localhost conf]# vim nginx.conf</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">#创建进程的用户和用户组</span><br><span class="line">#user  nobody;</span><br><span class="line">user jjyy jjyy</span><br><span class="line">#服务进程数量 --一般等于cpu的个数</span><br><span class="line">worker_processes  1;</span><br><span class="line">#全局错误日志定义，建议开启error级别的日志</span><br><span class="line">error_log logs/error.log error;</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line">#记录进程ID的文件</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">        #epoll 是多路复用IO中的一种方式，但是仅仅用于linux2.6以上的内核，可以大大的提升nginx的性能，linux建议使用epoll,FreeBSD建议使用kqueue</span><br><span class="line">        use epoll;</span><br><span class="line">        #一个worker_processe允许并发的连接数量</span><br><span class="line">        worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    #http连接的持续时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    #gzip压缩设置</span><br><span class="line">    #gzip  on;</span><br><span class="line">        #开启gzip功能</span><br><span class="line">        gzip on;</span><br><span class="line">        #最小压缩的文件</span><br><span class="line">        gzip_min_length 1k;</span><br><span class="line">        #压缩缓冲区</span><br><span class="line">        gzip_buffers 4 16k;</span><br><span class="line">        #http协议的版本</span><br><span class="line">        gzip_http_version 1.1;</span><br><span class="line">        #gzip压缩比率，1压缩比最小处理速度最快，9压缩比最大但是处理速度最慢（传输快但是cpu使用率高）</span><br><span class="line">        gzip_comp_level 2;</span><br><span class="line">        #和http头有关系，加个vary头，给代理服务器使用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也进行压缩，所以根据客户端的HTTP头来判断是否需要进行压缩</span><br><span class="line">        gzip_vary on;</span><br><span class="line">        #gzip压缩类型，不用添加text/html，否则会报警告信息</span><br><span class="line">        gzip_types text/plain text/javascript text/css application/xml application/x-javascript application/json;</span><br><span class="line">    </span><br><span class="line">    #设定负载均衡的服务器的列表，可以设置多个upstream,但是mysvr名称要区别出来</span><br><span class="line">    upstream myClusterServer&#123;</span><br><span class="line">        #weight 表示权值，权值越高被分配到的机会就大</span><br><span class="line">        server 127.0.0.1:8081 weight=5;</span><br><span class="line">        server 127.0.0.1:8082 weight=5;</span><br><span class="line">        server 127.0.0.1:8083 weight=5;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        #nginx监听的端口号</span><br><span class="line">        listen       80;</span><br><span class="line">        #域名可以有多个，用空格隔开</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        #字符编码</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        charset utf-8;</span><br><span class="line">        #设定本虚拟机的访问日志。关闭日志可以减少IO,提高性能。</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        #默认请求</span><br><span class="line">        location / &#123;</span><br><span class="line">            #定义服务器的默认网站根目录位置</span><br><span class="line">            root   html;</span><br><span class="line">            #定义首页索引文件的名称</span><br><span class="line">            index  index.html index.htm index.jsp;</span><br><span class="line">            #请求转向myClusterServer定义的服务器列表</span><br><span class="line">            proxy_pass http://myClusterServer;</span><br><span class="line">            proxy_redirect default;</span><br><span class="line">            #根代理服务器连接的超时时间，必须要留意这个time out时间不能超过75秒，当一台服务器宕机时，过10秒转发到另外一台服务器上</span><br><span class="line">            proxy_connect_timeout 10;</span><br><span class="line">        &#125;</span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>　　配置文件配置好后，就启动nginx试一试：<br>　　上面的配置文件出现了点问题，修改如下<br>　　<img src="/uploads/blog/Ngnix/ngnix_config_error.png" alt="ngnix_config_error"><br>　　启动nginx：并且查看运行状态<br>　　<img src="/uploads/blog/Ngnix/start_ngnix_check_status.png" alt="start_ngnix_check_status"><br>　　查询监听的端口号：<br>　　<code>netstat -anop |grep 80</code><br>　　<img src="/uploads/blog/Ngnix/Ngnix_process_check.png" alt="Ngnix_process_check"><br>　　访问nginx 默认地址：192.168.159.129–自动的定向到了tomcat中至此，已经完成大部分 功能了，后面只剩下配置memcached来实现session共享了。</p>
<h3 id="配置Memcached-实现Session共享"><a href="#配置Memcached-实现Session共享" class="headerlink" title="配置Memcached 实现Session共享"></a>配置Memcached 实现Session共享</h3><p>　　首先我们要将memcached的服务给安装好，同理安装memcached需要依赖libevent安装包，所以我们先安装libevent包.</p>
<ul>
<li>安装libevent<br><code>tar -zxvf libevent-2.0.22-stable.tar.gz
cd libevent-2.0.22-stable
sudo ./configure --prefix=/usr/local/libevent-2.0.22-stable
sudo make
sudo make install</code>        </li>
<li>安装memcache<br><code>tar -zxvf memcached-1.4.25.tar.gz
cd memcached-1.4.25.tar.gz
sudo ./configure \
--prefix=/usr/local/memcached-1.4.25 \
--with-libevent=/usr/local/libevent-2.0.22-stable
sudo make
sudo make install</code><br>安装完成之后，使用 ./memcached -i 查看信息<br><img src="/uploads/blog/Memcache/Memcache_check_install.png" alt="Upload_tomcat"><br>然后启动memcached 服务：<br><code>sudo ./memcached -d -v -p 12000 -m 256 -u jjyy</code><br> 命令参数说明：<br> -d 以守护进程运行<br> -v 提示信息（在事件循环找打印错误、警告信息）<br> -p 端口号<br> -m 分配的内存<br> -u  用户<br> -l  监听的ip地址<br><img src="/uploads/blog/Memcache/Memcache_config_cmd_info.png" alt="Upload_tomcat"><br> 启动之后查看，<br> <code>ps -ef|grep memcached</code><br> <img src="/uploads/blog/Memcache/Memcache_run_check.png" alt="Upload_tomcat"><br> 也可以通过window 的telnet来检测是否开启了服务：<br> <img src="/uploads/blog/Memcache/Windows_client_check_status.png" alt="Upload_tomcat"><br> 至此，所有要配置的服务都配置好了，下面就需要整合tomcat和memcache 服务了</li>
</ul>
<h3 id="配置Tomcat-和Memcached-实现Session共享"><a href="#配置Tomcat-和Memcached-实现Session共享" class="headerlink" title="配置Tomcat 和Memcached 实现Session共享"></a>配置Tomcat 和Memcached 实现Session共享</h3><p>　　以tomcat7_8081配置为例，其他两个也类似：<br>　　具体操作如下：<br>　　首先要修改tomcat的server.xml 和context.xml<br>　　<code>server.xml</code><br>　　在Engine 节点添加属性：jvmRouter=”tomcatRouter8081”<br>　　<img src="/uploads/blog/Tomcat/Tomcat_config_route_flag.png" alt="Tomcat_config_route_flag"><br>　　<code>context.xml</code><br>　　在context 节点中加入配置项（Manager具体属性代表的意思请查看）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Manager</span><br><span class="line">    className=&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span><br><span class="line">    memcachedNodes=&quot;n1:127.0.0.1:12000&quot;</span><br><span class="line">    sticky=&quot;false&quot;</span><br><span class="line">    requestUriIgnorePattern=&quot;.*\.(png|gif|jpg|css|js|ico|jpeg)$&quot;</span><br><span class="line">    sessionBackupAsync=&quot;false&quot;</span><br><span class="line">    sessionBackupTimeout=&quot;100&quot;</span><br><span class="line">    transcoderFactoryClass=&quot;de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p>
<p>　　<img src="/uploads/blog/Tomcat/Tomcat_configroute_flag2.png" alt="Tomcat_configroute_flag2"><br>　　然后，将memcached实现session共享的依赖的jar包放入到tomcat的lib目录中，具体jar包需要到google下载（可以使用VPN,否则就想其他办法），需要的依赖如下图：<br>　　<img src="/uploads/blog/Tomcat/memcache_func_dependency.png" alt="memcache_func_dependency"><br>　　将这些jar包都扔到tomcat的lib目录中,到这里似乎是完成了，但是我们要实现session共享，我们就需要写一个简单的验证页面来测试我们的实验是否成功了：<br>　　将tomcat中默认的index.jsp替换掉【修改tomcat的webapp 中ROOT中的index.jsp】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class="line">    &lt;title&gt;共享session测试【Tomcat+memcached】&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    SessionID:&lt;%=session.getId()%&gt;</span><br><span class="line">    &lt;BR&gt;</span><br><span class="line">    SessionIP:&lt;%=request.getServerName()%&gt;</span><br><span class="line">    &lt;BR&gt;</span><br><span class="line">    SessionPort:&lt;%=request.getServerPort()%&gt;</span><br><span class="line">    &lt;BR&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">    out.println(&quot;This is Tomcat Server 8081.&quot;);</span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>　　替换之后，启动三个tomcat,然后客户端去访问，查看是否sessionId是否相等，实验结果如下：<br>　　<img src="/uploads/blog/Tomcat/Session_share_Test.png" alt="Session_share_Test"><br>　　由上图可知，三个tomcat访问的SessionId都是一样的。<br>　　最后我们还可以测试一下负载均衡的实现：<br>　　访问服务器地址：192.168.159.129，多次刷新页面，看请求是不是机会均等的轮询访问：<br>　　第一次：<br>　　<img src="/uploads/blog/Tomcat/Visit_1.png" alt="Visit_1"><br>　　第二次：<br>　　<img src="/uploads/blog/Tomcat/Visit_2.png" alt="Visit_2"><br>　　第三次：<br>　　<img src="/uploads/blog/Tomcat/Visit_3.png" alt="Visit_3"><br>　　第四次：<br>　　<img src="/uploads/blog/Tomcat/Visit_4.png" alt="Visit_4"><br>　　第五次：<br>　　<img src="/uploads/blog/Tomcat/Visit_5.png" alt="Visit_5"><br>　　第六次：<br>　　<img src="/uploads/blog/Tomcat/Visit_6.png" alt="Visit_6"><br>　　第七次：<br>　　<img src="/uploads/blog/Tomcat/Visit_7.png" alt="Visit_7"><br>　　从上面的七次访问同一IP地址，通过nginx的轮询到不同的服务器中，而且每次的sessionID都是不同的，所以说这种方式对负载均衡也是实现了。<br>　　好了，写了这么多，要睡觉了，困死了，实践这些需要自己动手才会发现问题的所在，希望自己好好加油吧！</p>
]]></content>
    </entry>
    
  
  
</search>
